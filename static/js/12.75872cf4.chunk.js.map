{"version":3,"sources":["src/screens/Video.tsx","src/ui/VideoPlayer.web.tsx","src/ui/core/BadgeContainer.tsx","src/ui/VideoCard.tsx","src/ui/Screen.tsx","src/ui/Header.tsx"],"names":["route","t","useTranslation","video","params","useState","currentVideo","setCurrentVideo","courseData","useSelector","state","courses","find","course","basicInfo","code","name","courseId","relatedVideos","useMemo","extendedInfo","vc_recordings","current","sort","a","b","date","dark","useContext","DeviceContext","w","Dimensions","get","width","_styles","StyleSheet","create","container","paddingHorizontal","p","paddingTop","title","headerType","HEADER_TYPE","SECONDARY","View","style","height","flexDirection","justifyContent","FlatList","data","renderItem","item","url","backgroundColor","colors","gray600","gray300","onPress","keyExtractor","ListHeaderComponent","s","c","gray100","gray800","gray200","gray500","marginTop","moment","format","marginVertical","src","controls","autoPlay","badge","position","borderRadius","red","right","top","alignItems","children","number","badgeText","hours","length","minsString","Math","ceil","floor","toString","lengthString","android_ripple","color","lightGray","key","paddingVertical","Image","source","uri","cover_url","undefined","resizeMode","bottom","padding","marginLeft","flex","numberOfLines","gray700","chosenTheme","screen","StatusBar","barStyle","notifications","user","config","session","dispatch","useDispatch","notificationCount","filter","n","is_read","navigation","useNavigation","themeToggleIconName","toggleTheme","useCallback","setConfig","theme","header","marginHorizontal","headerSection","headerMiddle","headerEnd","MAIN","DrawerActions","toggleDrawer","marginRight","size","genericPlatform","navigate","goBack"],"mappings":"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","file":"static/js/12.75872cf4.chunk.js","sourcesContent":["import {useNavigation} from '@react-navigation/core';\nimport React, {useContext, useMemo, useState} from 'react';\nimport {Dimensions, FlatList, StyleSheet, View} from 'react-native';\nimport colors from '../colors';\nimport {useTranslation} from 'react-i18next';\nimport {Recording} from 'open-polito-api/lib/course';\nimport {DeviceContext} from '../context/Device';\nimport {p} from '../scaling';\nimport Screen from '../ui/Screen';\nimport Text from '../ui/core/Text';\nimport {useSelector} from 'react-redux';\nimport {RootState} from '../store/store';\nimport {CourseState} from '../store/coursesSlice';\nimport VideoCard from '../ui/VideoCard';\nimport moment from 'moment';\nimport VideoPlayer from '../ui/VideoPlayer';\nimport Header, {HEADER_TYPE} from '../ui/Header';\n\n// TODO fullscreen mode\n// TODO custom video controls design\n// TODO \"cast to\" feature\n// TODO video download\n\nexport default function Video({route}) {\n  const {t} = useTranslation();\n\n  const video: {video: Recording; courseId: string} = route.params.video;\n\n  const [currentVideo, setCurrentVideo] = useState<Recording>(video.video);\n\n  const courseData = useSelector<RootState, CourseState | undefined>(state =>\n    state.courses.courses.find(\n      course =>\n        course.basicInfo.code + course.basicInfo.name === video.courseId,\n    ),\n  );\n\n  const relatedVideos = useMemo(() => {\n    return [...(courseData?.extendedInfo?.vc_recordings.current || [])].sort(\n      (a, b) => b.date - a.date,\n    );\n  }, [courseData]);\n\n  const {dark} = useContext(DeviceContext);\n\n  const w = Dimensions.get('window').width;\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      container: {\n        paddingHorizontal: 16 * p,\n        paddingTop: 24 * p,\n      },\n    });\n  }, []);\n\n  return (\n    <Screen>\n      <Header title={video.video.title} headerType={HEADER_TYPE.SECONDARY} />\n      <View\n        style={{\n          height: w / 1.78,\n          flexDirection: 'row',\n          justifyContent: 'center',\n        }}>\n        {/* <RNVideoPlayer\n          source={{uri: currentVideo.url}}\n          navigator={navigation}\n          seekColor={colors.gradient1}\n        /> */}\n        <VideoPlayer video={currentVideo} />\n      </View>\n      <FlatList\n        data={relatedVideos}\n        renderItem={({item}) => (\n          <View\n            style={[\n              item.url === currentVideo.url\n                ? {backgroundColor: dark ? colors.gray600 : colors.gray300}\n                : {},\n            ]}>\n            <VideoCard\n              item={item}\n              dark={dark}\n              onPress={() => setCurrentVideo(item)}\n            />\n          </View>\n        )}\n        keyExtractor={item => item.url}\n        ListHeaderComponent={() => (\n          <View style={_styles.container}>\n            <Text s={16 * p} w=\"b\" c={dark ? colors.gray100 : colors.gray800}>\n              {currentVideo.title}\n            </Text>\n            <Text\n              s={12 * p}\n              w=\"m\"\n              c={dark ? colors.gray200 : colors.gray500}\n              style={{marginTop: 8 * p}}>\n              {courseData?.basicInfo.name} ·{' '}\n              {moment(currentVideo.date).format('ll')}\n            </Text>\n\n            <View style={{marginVertical: 24 * p}}>\n              {/* <Button text={t('download (feature coming soon)')} secondary /> */}\n            </View>\n            <Text s={12 * p} w=\"m\" c={dark ? colors.gray100 : colors.gray800}>\n              {t('relatedVideos')}\n            </Text>\n          </View>\n        )}\n      />\n    </Screen>\n  );\n}\n","import {Recording} from 'open-polito-api/lib/course';\nimport React from 'react';\n\nconst VideoPlayer = ({video}: {video: Recording}) => {\n  return <video src={video.url} controls autoPlay />;\n};\n\nexport default VideoPlayer;\n","import React, {FC, ReactNode, useMemo} from 'react';\nimport {StyleSheet, View, ViewStyle} from 'react-native';\nimport colors from '../../colors';\nimport {p} from '../../scaling';\nimport Text from './Text';\n\n/**\n * Wraps a component inside a view showing a badge.\n *\n * The badge is hidden if the number is 0.\n *\n * @param param0\n * @returns\n */\nconst BadgeContainer: FC<{\n  children: ReactNode;\n  style?: ViewStyle;\n  number: number | string;\n}> = ({children, style = {}, number}) => {\n  const badgeText = useMemo(() => {\n    return typeof number === 'string' ? number : number > 99 ? '99+' : number;\n  }, [number]);\n\n  return (\n    <View style={{...style}}>\n      {children}\n      {badgeText !== 0 ? (\n        <View style={_styles.badge}>\n          <Text w=\"r\" s={10 * p} c={colors.gray100}>\n            {badgeText}\n          </Text>\n        </View>\n      ) : null}\n    </View>\n  );\n};\n\nconst _styles = StyleSheet.create({\n  badge: {\n    position: 'absolute',\n    width: 20 * p,\n    height: 20 * p,\n    borderRadius: 20 * p,\n    backgroundColor: colors.red,\n    right: -10 * p,\n    top: -10 * p,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default BadgeContainer;\n","import {useNavigation} from '@react-navigation/native';\nimport moment from 'moment';\nimport {Recording} from 'open-polito-api/lib/course';\nimport React from 'react';\nimport {Dimensions, Image, View} from 'react-native';\nimport colors from '../colors';\nimport {p} from '../scaling';\nimport PressableBase from './core/PressableBase';\nimport Text from './core/Text';\n\nconst VideoCard = ({\n  item,\n  onPress,\n  dark,\n}: {\n  item: Recording;\n  onPress: () => any;\n  dark: boolean;\n}) => {\n  const width = Dimensions.get('window').width;\n\n  let hours = item.length / 60;\n  let minsString = Math.ceil((hours - Math.floor(hours)) * 60).toString();\n  if (minsString.length == 1) {\n    minsString = '0' + minsString;\n  }\n  const lengthString = Math.floor(hours) + ':' + minsString + ':00';\n  return (\n    <PressableBase\n      onPress={onPress}\n      android_ripple={{color: colors.lightGray}}\n      key={item.date + item.title}\n      style={[\n        {\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          paddingVertical: 12 * p,\n          paddingHorizontal: 16 * p,\n        },\n      ]}>\n      <View>\n        <Image\n          source={{\n            uri: item.cover_url.length != 0 ? item.cover_url : undefined,\n          }}\n          style={{\n            width: width * 0.4,\n            height: width * 0.23,\n            backgroundColor: '#000',\n          }}\n          resizeMode=\"contain\"\n        />\n        <View\n          style={{\n            position: 'absolute',\n            right: 0,\n            bottom: 0,\n            padding: 4 * p,\n            backgroundColor: '#000',\n          }}>\n          <Text s={10 * p} w=\"m\" c={colors.gray100}>\n            {lengthString}\n          </Text>\n        </View>\n      </View>\n      <View\n        style={{\n          marginLeft: 16 * p,\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n        }}>\n        <View>\n          <Text\n            w=\"m\"\n            s={12 * p}\n            c={dark ? colors.gray100 : colors.gray800}\n            numberOfLines={2}>\n            {item.title}\n          </Text>\n          <Text\n            w=\"r\"\n            s={10 * p}\n            c={dark ? colors.gray200 : colors.gray700}\n            numberOfLines={1}\n            style={{marginVertical: 8 * p}}>\n            {moment(item.date).format('ll')}\n          </Text>\n        </View>\n        {/* TODO video downloader */}\n        {/* <View style={{flexDirection: 'row', alignItems: 'center'}}>\n                <TablerIcon\n                  name=\"download\"\n                  size={16 * p}\n                  color={colors.accent300}\n                  style={{marginRight: 4 * p}}\n                />\n                <Text\n                  w=\"r\"\n                  s={10 * p}\n                  c={dark ? colors.gray200 : colors.gray700}\n                  numberOfLines={1}>\n                  {item.url}\n                </Text>\n              </View> */}\n      </View>\n    </PressableBase>\n  );\n};\n\nexport default VideoCard;\n","import React, {ReactNode, useContext, useMemo} from 'react';\nimport {StatusBar, StyleSheet, View} from 'react-native';\nimport colors from '../colors';\nimport {DeviceContext} from '../context/Device';\n\nconst Screen = ({children}: {children: ReactNode}) => {\n  const {dark, chosenTheme} = useContext(DeviceContext);\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      screen: {\n        backgroundColor: dark ? colors.gray800 : colors.gray100,\n        flex: 1,\n      },\n    });\n  }, [dark]);\n\n  return (\n    <View style={{flex: 1}}>\n      <StatusBar\n        barStyle={\n          chosenTheme == 'system'\n            ? 'default'\n            : dark\n            ? 'dark-content'\n            : 'light-content'\n        }\n      />\n      <View style={_styles.screen}>{children}</View>\n    </View>\n  );\n};\n\nexport default Screen;\n","import {useNavigation} from '@react-navigation/native';\nimport {Notification} from 'open-polito-api/lib/notifications';\nimport React, {FC, useCallback, useContext, useMemo} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {useDispatch, useSelector} from 'react-redux';\nimport colors from '../colors';\nimport {DeviceContext} from '../context/Device';\nimport {p} from '../scaling';\nimport {AppDispatch, RootState} from '../store/store';\nimport BadgeContainer from './core/BadgeContainer';\nimport PressableBase from './core/PressableBase';\nimport TablerIcon from './core/TablerIcon';\nimport Text from './core/Text';\nimport {DrawerActions} from '@react-navigation/native';\nimport {genericPlatform} from '../utils/platform';\nimport {setConfig} from '../store/sessionSlice';\nimport {Configuration} from '../defaultConfig';\n\n// TODO navigation to downloads\n\nexport enum HEADER_TYPE {\n  MAIN = 0,\n  SECONDARY = 1,\n}\n\nexport type HeaderParams = {\n  title: string;\n  headerType: HEADER_TYPE;\n};\n\nconst Header: FC<HeaderParams> = ({title, headerType}) => {\n  const {dark} = useContext(DeviceContext);\n  const notifications = useSelector<RootState, Notification[]>(\n    state => state.user.notifications,\n  );\n  const config = useSelector<RootState, Configuration>(\n    state => state.session.config,\n  );\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  const notificationCount = useMemo<number>(() => {\n    return notifications.filter(n => !n.is_read).length;\n  }, [notifications]);\n\n  const navigation = useNavigation();\n\n  const themeToggleIconName = useMemo(\n    () => (dark ? 'moon-stars' : 'sun'),\n    [dark],\n  );\n\n  const toggleTheme = useCallback(() => {\n    dispatch(setConfig({...config, theme: dark ? 'light' : 'dark'}));\n  }, [dark, config, dispatch]);\n\n  // TODO drawer notification count\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      header: {\n        flexDirection: 'row',\n        marginHorizontal: 12 * p,\n        marginVertical: 16 * p,\n        alignItems: 'center',\n      },\n      headerSection: {\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n      },\n      headerMiddle: {\n        flex: 2,\n        flexDirection: 'row',\n        justifyContent: 'center',\n      },\n      headerEnd: {\n        justifyContent: 'flex-end',\n      },\n    });\n  }, []);\n\n  return (\n    <View style={_styles.header}>\n      {headerType === HEADER_TYPE.MAIN ? (\n        <>\n          <View style={_styles.headerSection}>\n            {/* TODO add logic for badge number*/}\n            <PressableBase\n              onPress={() => {\n                navigation.dispatch(DrawerActions.toggleDrawer());\n              }}>\n              <BadgeContainer number={0} style={{marginRight: 16 * p}}>\n                <TablerIcon\n                  name=\"menu-2\"\n                  size={24 * p}\n                  color={dark ? colors.gray100 : colors.gray800}\n                />\n              </BadgeContainer>\n            </PressableBase>\n            {/* TODO download manager */}\n            {/* <TablerIcon\n              name=\"download\"\n              size={24 * p}\n              color={dark ? colors.gray100 : colors.gray800}\n            /> */}\n          </View>\n          <View\n            style={{\n              ..._styles.headerSection,\n              ..._styles.headerMiddle,\n            }}>\n            <Text\n              c={dark ? colors.gray100 : colors.gray800}\n              w=\"m\"\n              s={16 * p}\n              numberOfLines={1}>\n              {title}\n            </Text>\n          </View>\n          <View style={{..._styles.headerSection, ..._styles.headerEnd}}>\n            {genericPlatform !== 'mobile' && (\n              <PressableBase onPress={toggleTheme}>\n                <TablerIcon\n                  name={themeToggleIconName}\n                  size={24 * p}\n                  color={dark ? colors.gray100 : colors.gray800}\n                  style={{marginRight: 16 * p}}\n                />\n              </PressableBase>\n            )}\n            <PressableBase onPress={() => navigation.navigate('Search')}>\n              <TablerIcon\n                name=\"search\"\n                size={24 * p}\n                color={dark ? colors.gray100 : colors.gray800}\n                style={{marginRight: 16 * p}}\n              />\n            </PressableBase>\n            <PressableBase onPress={() => navigation.navigate('Notifications')}>\n              <BadgeContainer number={notificationCount}>\n                <TablerIcon\n                  name=\"bell\"\n                  size={24 * p}\n                  color={dark ? colors.gray100 : colors.gray800}\n                />\n              </BadgeContainer>\n            </PressableBase>\n          </View>\n        </>\n      ) : headerType === HEADER_TYPE.SECONDARY ? (\n        <>\n          <PressableBase onPress={navigation.goBack}>\n            <TablerIcon\n              name=\"arrow-left\"\n              size={24 * p}\n              color={dark ? colors.gray200 : colors.gray700}\n            />\n          </PressableBase>\n          <Text\n            s={16 * p}\n            w=\"m\"\n            c={dark ? colors.gray100 : colors.gray800}\n            style={{marginLeft: 16 * p}}>\n            {title}\n          </Text>\n        </>\n      ) : null}\n    </View>\n  );\n};\n\nexport default Header;\n"],"sourceRoot":""}