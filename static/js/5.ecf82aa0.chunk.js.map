{"version":3,"sources":["src/utils/Logger.ts"],"names":["Logger","entry","appendFile","logFilePath","JSON","stringify","catch","err","console","log","hasLoggedBasicDeviceInfo","type","appBuildNumber","DeviceInfo","getBuildNumber","appBuildVariant","Config","VARIANT","appVersion","version","appVersionBinary","getVersion","osApiLevel","getApiLevelSync","osName","getSystemName","getBaseOsSync","osVersion","getSystemVersion","theme","store","getState","session","config","writeToFile","logBasicDeviceInfo","parseInt","ENABLE_DEBUG_OPTIONS","endpoint","includes","logRequest","error","logsDirectoryPath","getDocumentsPath","moment","format"],"mappings":"w0BAMkD,IA2B7BA,EAAM,oCAyExB,MA7BA,EApBA,EAxBwB,EAqFxB,OArFwB,6CAoBzB,UAAyBC,SACjBC,YAAWF,EAAOG,YAAaC,KAAKC,UAAUJ,GAAS,MAAMK,OACjE,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,SAEtB,sFAKD,YACE,IAAIP,EAAOU,yBAAX,CACA,IAAMT,EAAiC,CACrCU,KAAM,cACNC,eAAgBC,IAAWC,iBAC3BC,gBAAiBC,IAAOC,SAAW,GACnCC,WAAYC,EAAQA,QACpBC,iBAAkBP,IAAWQ,aAC7BC,WAAYT,IAAWU,kBACvBC,OAAQX,IAAWY,iBAAmBZ,IAAWa,gBACjDC,UAAWd,IAAWe,mBACtBC,MAAOC,IAAMC,WAAWC,QAAQC,OAAOJ,aAEnC7B,EAAOkC,YAAYjC,GACzBD,EAAOU,0BAA2B,MACnC,6EAQD,UAAwBT,SAChBD,EAAOmC,qBAERC,SAASpB,IAAOqB,qBAAuB,MAExCpC,EAAMqC,SAASC,SAAS,iBACtBvC,EAAOkC,YAAY,EAAD,CACtBvB,KAAM,WACHV,SAEN,0EAMD,SAAsBA,GACpB,KAAC,kBACOD,EAAOmC,2BACPnC,EAAOwC,WAAWvC,KAF1B,KAID,8BAMD,UAAsBwC,SACdzC,EAAOmC,2BACPnC,EAAOkC,YAAY,EAAD,CACtBvB,KAAM,SACH8B,OAEN,kDArFwB,GAANzC,EACL0C,kBAAoBC,cADf3C,EAGLG,YACZH,EAAO0C,kBAAP1C,gBAGA4C,MAASC,OAAO,yBAChB,OARiB7C,EAULU,0BAAoC,G","file":"static/js/5.ecf82aa0.chunk.js","sourcesContent":["import moment from 'moment';\nimport {Entry} from 'open-polito-api/lib/device';\nimport Config from 'react-native-config';\nimport DeviceInfo from 'react-native-device-info';\nimport store from '../store/store';\nimport version from '../../version.json';\nimport {appendFile, getDocumentsPath} from './fs';\n\nexport type BasicDeviceInfoLogEntry = {\n  type: 'DEVICE_INFO';\n  appBuildNumber: string;\n  appBuildVariant: string;\n  appVersion: string;\n  appVersionBinary: string;\n  osApiLevel: number;\n  osName: string;\n  osVersion: string;\n  theme: 'light' | 'dark' | 'system';\n};\n\nexport type RequestLogEntry = Entry & {\n  type: 'REQUEST';\n};\n\nexport type ErrorLogEntry = Error & {\n  type: 'ERROR';\n};\n\nexport type LogEntry =\n  | BasicDeviceInfoLogEntry\n  | RequestLogEntry\n  | ErrorLogEntry;\n\nexport default class Logger {\n  public static logsDirectoryPath = getDocumentsPath();\n\n  public static logFilePath =\n    Logger.logsDirectoryPath +\n    '/' +\n    'request_log-' +\n    moment().format('YYYY-MM-DD-THHmmssSSS') +\n    '.txt';\n\n  public static hasLoggedBasicDeviceInfo: boolean = false;\n\n  /**\n   * Writes log entry to log file\n   * @param entry\n   *\n   * @remarks\n   * Uses ExternalDirectoryPath (/storage/emulated/0/Android/data/org.openpolito.app/files/) on Android,\n   * DocumentDirectoryPath on iOS\n   */\n  static async writeToFile(entry: LogEntry) {\n    await appendFile(Logger.logFilePath, JSON.stringify(entry) + '\\n').catch(\n      err => console.log(err),\n    );\n  }\n\n  /**\n   * Logs basic device info\n   */\n  static async logBasicDeviceInfo() {\n    if (Logger.hasLoggedBasicDeviceInfo) return;\n    const entry: BasicDeviceInfoLogEntry = {\n      type: 'DEVICE_INFO',\n      appBuildNumber: DeviceInfo.getBuildNumber(),\n      appBuildVariant: Config.VARIANT || '',\n      appVersion: version.version,\n      appVersionBinary: DeviceInfo.getVersion(),\n      osApiLevel: DeviceInfo.getApiLevelSync(),\n      osName: DeviceInfo.getSystemName() || DeviceInfo.getBaseOsSync(),\n      osVersion: DeviceInfo.getSystemVersion(),\n      theme: store.getState().session.config.theme,\n    };\n    await Logger.writeToFile(entry);\n    Logger.hasLoggedBasicDeviceInfo = true;\n  }\n\n  /**\n   * Logs a network request\n   *\n   * @remarks See {@link Entry}\n   * @param entry\n   */\n  static async logRequest(entry: Entry) {\n    await Logger.logBasicDeviceInfo();\n    // Don't log if debug options not enabled\n    if (!parseInt(Config.ENABLE_DEBUG_OPTIONS!, 10)) return;\n    // Don't log if login endpoint\n    if (entry.endpoint.includes('login')) return;\n    await Logger.writeToFile({\n      type: 'REQUEST',\n      ...entry,\n    });\n  }\n\n  /**\n   * Like {@link logRequest}, but called synchronously\n   * @param entry\n   */\n  static logRequestSync(entry: Entry) {\n    (async () => {\n      await Logger.logBasicDeviceInfo();\n      await Logger.logRequest(entry);\n    })();\n  }\n\n  /**\n   * Logs an error's name, message, and stack trace\n   * @param error\n   */\n  static async logError(error: Error) {\n    await Logger.logBasicDeviceInfo();\n    await Logger.writeToFile({\n      type: 'ERROR',\n      ...error,\n    });\n  }\n}\n"],"sourceRoot":""}