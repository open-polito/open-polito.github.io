{"version":3,"sources":["src/ui/DirectoryItem.tsx","src/ui/NoContent.tsx","src/utils/html.ts","src/ui/DirectoryItemRecursive.tsx","src/ui/core/BadgeContainer.tsx","src/ui/Section.tsx","src/ui/Notification.tsx","src/utils/getFileIcon.tsx","src/ui/Screen.tsx","src/ui/Header.tsx","src/ui/MaterialExplorer.tsx","src/ui/Tabs.tsx"],"names":["sizes","computeSizeLabel","size","_size","Math","floor","index","min","log10","length","toFixed","downloadFile","device","item","getDownloadURL","then","url","openURL","relativeDate","dark","course","onPress","children","sizeLabel","useMemo","type","useContext","DeviceContext","iconComponent","getFileIcon","filename","name","color","colors","gray200","gray700","p","View","style","flexDirection","android_ripple","lightGray","justifyContent","alignItems","paddingVertical","flex","marginLeft","marginRight","c","gray100","gray800","w","s","numberOfLines","gray300","moment","creation_date","fromNow","format","Pressable","accent300","width","backgroundColor","gray600","t","useTranslation","htmlTags","input","decode","replace","DirectoryItemRecursive","useState","opened","setOpened","map","key","code","_styles","StyleSheet","create","badge","position","height","borderRadius","red","right","top","number","badgeText","title","marginTop","isCourseAlert","n","undefined","topic","notification","read","courseName","icon","NotificationType","TEST","DIRECT","NOTICE","MATERIAL","stripHTML","text","body","dateString","date","time","offset","useSharedValue","animStyle","useAnimatedStyle","value","useEffect","withTiming","duration","course_name","padding","RenderHTMLSource","source","html","ext","split","pop","toLowerCase","i","FILE_TYPES","extensions","includes","colorLight","gray500","black","gradient1","orange","green","chosenTheme","screen","StatusBar","barStyle","HEADER_TYPE","headerType","notifications","useSelector","state","user","config","session","dispatch","useDispatch","notificationCount","filter","is_read","navigation","useNavigation","themeToggleIconName","toggleTheme","useCallback","setConfig","theme","header","marginHorizontal","marginVertical","headerSection","headerMiddle","headerEnd","MAIN","DrawerActions","toggleDrawer","genericPlatform","navigate","SECONDARY","goBack","courseId","courses","basicInfo","extendedInfo","material","find","adjusted","items","onChange","defaultIndex","selectedIndex","setSelectedIndex","container","paddingHorizontal","tab","selectedIndicator","ScrollView","contentContainerStyle","horizontal","showsHorizontalScrollIndicator","label"],"mappings":"yKAAA,cACA,SACA,EAUuC,8bAVvC,OACA,OACA,WACA,QACA,YACA,WACA,QACA,WACA,WAEA,YAAuC,gIAWvC,IAAMA,EAAQ,CAAC,IAAK,KAAM,KAAM,KAAM,MAEzBC,EAAmB,SAACC,GAC/B,IAAMC,EAAQC,KAAKC,MAAMH,GACnBI,EAAQF,KAAKG,IACjBJ,EAAQ,EAAIC,KAAKC,MAAMD,KAAKC,MAAMD,KAAKI,MAAML,IAAU,GAAK,EAC5DH,EAAMS,OAAS,GAEjB,OAAWN,EAAK,SAAG,GAAiB,IAAVG,EAAc,EAAI,EAAIA,IAAQI,QAAQ,GAAE,IAChEV,EAAMM,IAER,qBAEF,IAAMK,EAAe,SAACC,EAAgBC,IACpC,EAAAC,kBAAeF,EAAQC,GAAME,MAAK,SAAAC,GAAG,OAAI,EAAAC,WAAQD,OAmHjD,EAhH4C,SAAH,GAOpC,IANLH,EAAI,EAAJA,KAAK,EAAD,EACJK,oBAAY,OAAQ,EACpBC,EAAI,EAAJA,KAAK,EAAD,EACJC,cAAM,MAAG,GAAE,MACXC,eAAO,MAAG,aAAQ,EAClBC,EAAQ,EAARA,SAEMC,GAAY,EAAAC,YAAQ,WACxB,MAAqB,SAAdX,EAAKY,KAAkBxB,EAA6B,IAAZY,EAAKX,MAAe,KAClE,CAACW,IAEGD,GAAU,EAAAc,cAAWC,iBAArBf,OAEDgB,GAAgB,EAAAJ,YAAQ,WAC5B,MAAqB,SAAdX,EAAKY,MACV,EAAAI,WAAYhB,EAAKiB,SAAUX,GAE3B,wBAAC,UAAU,CACTY,KAAK,SACLC,MAAOb,EAAOc,UAAOC,QAAUD,UAAOE,QACtCjC,KAAM,GAAKkC,QAGd,CAACvB,EAAMM,IAEV,OACE,wBAAC,EAAAkB,KAAI,CACHC,MAAO,CACLC,cAAe,WAEjB,wBAAC,UAAa,CACZC,eAAgB,CAACR,MAAOC,UAAOQ,WAC/BpB,QAAS,WACO,SAAdR,EAAKY,MAAqDJ,KAE5DiB,MAAO,CACLC,cAAe,MACfG,eAAgB,gBAChBC,WAAY,SACZC,gBAAiB,IAEnB,wBAAC,EAAAP,KAAI,CACHC,MAAO,CACLC,cAAe,MACfI,WAAY,SACZE,KAAM,IAEPjB,EACD,wBAAC,EAAAS,KAAI,CACHC,MAAO,CACLC,cAAe,SACfG,eAAgB,aAChBI,WAAY,GAAKV,IACjBS,KAAM,IAER,wBAAC,EAAAR,KAAI,CAACC,MAAO,CAACS,YAAa,GAAKX,MAC9B,wBAAC,UAAI,CACHY,EAAG7B,EAAOc,UAAOgB,QAAUhB,UAAOiB,QAClCC,EAAE,IACFC,EAAG,GAAKhB,IACRiB,cAAe,GACdxC,EAAKkB,OAGK,SAAdlB,EAAKY,MACJ,wBAAC,EAAAY,KAAI,CAACC,MAAO,CAACC,cAAe,SAAUM,KAAM,IAC3C,wBAAC,UAAI,CAACQ,cAAe,EAAGF,EAAE,IAAIC,EAAG,GAAKhB,IAAGY,EAAGf,UAAOqB,SAChD/B,EAAY,SACZL,GACG,EAAAqC,WAAO1C,EAAK2C,eAAeC,WAC3B,EAAAF,WAAO1C,EAAK2C,eAAeE,OAAO,MACrCtC,EAAM,SAASA,EAAW,OAOtB,SAAdP,EAAKY,KACJ,wBAAC,EAAAkC,UAAS,CACRnB,eAAgB,CAACR,MAAOC,UAAOQ,WAC/BpB,QAAS,kBAAMV,EAAaC,EAAQC,KACpC,wBAAC,UAAU,CACTkB,KAAK,WACL7B,KAAM,GAAKkC,IACXJ,MAAOC,UAAO2B,aAGhB,MAES,QAAd/C,EAAKY,KACJ,wBAAC,EAAAY,KAAI,CAACC,MAAO,CAACC,cAAe,QAC3B,wBAAC,EAAAF,KAAI,CACHC,MAAO,CACLuB,MAAO,GAAKzB,IACZO,WAAY,eAEd,wBAAC,EAAAN,KAAI,CACHC,MAAO,CACLO,KAAM,EACNC,WAAY,EAAIV,IAChByB,MAAO,EAAIzB,IACX0B,gBAAiB3C,EAAOc,UAAO8B,QAAU9B,UAAOqB,YAItD,wBAAC,EAAAjB,KAAI,CAACC,MAAO,CAACO,KAAM,IAAKvB,IAEzB,OAKmB,EAAD,W,0FCnJb,WACb,IAAO0C,GAAK,EAAAC,oBAALD,EAEA7C,GAAQ,EAAAO,cAAWC,iBAAnBR,KAEP,OACE,wBAAC,EAAAkB,KAAI,CAACC,MAAO,CAACO,KAAM,EAAGN,cAAe,MAAOG,eAAgB,WAC3D,wBAAC,UAAI,CAACU,EAAG,GAAID,EAAE,IAAIH,EAAG7B,EAAOc,UAAOC,QAAUD,UAAOE,SAClD6B,EAAE,gBAfX,MAK+B,8bAL/B,OACA,QACA,OACA,WACA,QACA,WAA+B,kI,oGCL/B,cAEaE,EAAW,iBAAiB,aAIvC,YAFuB,SAACC,GACxB,OAAO,EAAAC,UAAOD,GAAOE,QAAQH,EAAU,M,2FCA1B,SAASI,EAAuB,GAM3C,IALFnD,EAAI,EAAJA,KACAN,EAAI,EAAJA,KAKA,GAA4B,EAAA0D,aAAS,GAAM,qBAApCC,EAAM,KAAEC,EAAS,KAExB,OACE,wBAAC,EAAApC,KAAI,KACW,QAAbxB,EAAKY,KACJ,wBAAC,UAAa,CAACN,KAAMA,EAAMN,KAAMA,IAEjC,wBAAC,EAAAwB,KAAI,KACH,wBAAC,UAAa,CACZlB,KAAMA,EACNN,KAAMA,EACNQ,QAAS,WACPoD,GAAWD,KAEZA,EACG3D,EAAKS,SAASoD,KAAI,SAAA7D,GAAI,OACpB,wBAACyD,EAAsB,CACrBnD,KAAMA,EACNwD,IAAK9D,EAAK+D,KACV/D,KAAMA,OAGV,O,eAlChB,EAE4C,8bAF5C,OACA,OACA,YAA4C,kI,iGCF5C,MAI0B,8bAJ1B,OACA,OACA,WACA,QACA,WAA0B,gIAU1B,IAuBMgE,EAAUC,aAAWC,OAAO,CAChCC,MAAO,CACLC,SAAU,WACVpB,MAAO,GAAKzB,IACZ8C,OAAQ,GAAK9C,IACb+C,aAAc,GAAK/C,IACnB0B,gBAAiB7B,UAAOmD,IACxBC,OAAQ,GAAKjD,IACbkD,KAAM,GAAKlD,IACXM,eAAgB,SAChBC,WAAY,YAEb,EA/BE,SAAH,GAAwC,IAAnCrB,EAAQ,EAARA,SAAS,EAAD,EAAEgB,aAAK,MAAG,GAAE,EAAEiD,EAAM,EAANA,OACrBC,GAAY,EAAAhE,YAAQ,WACxB,MAAyB,kBAAX+D,EAAsBA,EAASA,EAAS,GAAK,MAAQA,IAClE,CAACA,IAEJ,OACE,wBAAC,EAAAlD,KAAI,CAACC,MAAK,iBAAMA,IACdhB,EACc,IAAdkE,EACC,wBAAC,EAAAnD,KAAI,CAACC,MAAOuC,EAAQG,OACnB,wBAAC,UAAI,CAAC7B,EAAE,IAAIC,EAAG,GAAKhB,IAAGY,EAAGf,UAAOgB,SAC9BuC,IAGH,OAmBoB,EAAD,W,iGCnD7B,cACA,OACA,WACA,QACA,WAkBE,EATc,SAAH,GAA4D,IAAvDC,EAAK,EAALA,MAAOtE,EAAI,EAAJA,KAAK,EAAD,EAAEmB,aAAK,MAAG,GAAE,EAAEhB,EAAQ,EAARA,SACzC,OACE,wBAAC,EAAAe,KAAI,CAACC,MAAK,iBAAMA,IACf,wBAAC,UAAI,CAACc,EAAG,GAAKhB,IAAGe,EAAE,IAAIH,EAAG7B,EAAOc,UAAOgB,QAAUhB,UAAOiB,SACtDuC,GAEH,wBAAC,EAAApD,KAAI,CAACC,MAAO,CAACoD,UAAW,GAAKtD,MAAKd,KAKlB,EAAD,W,iGCxBtB,cAEA,QACA,UACA,OACA,WAKA,SACA,WACA,QAEA,UACA,WACA,WAA+B,gkBAU/B,IAAMqE,EAAgB,SAACC,GACrB,YAAqCC,IAA7BD,EAAmBE,OA6H3B,EA1HoD,SAAH,GAM5C,IALLrE,EAAI,EAAJA,KACAsE,EAAY,EAAZA,aACA5E,EAAI,EAAJA,KAAK,EAAD,EACJ6E,YAAI,OAAO,MACXC,kBAAU,MAAG,GAAE,EAETC,GAAO,EAAA1E,YAAQ,WACnB,OAAQC,GACN,KAAK0E,mBAAiBC,KACpB,MAAO,YACT,KAAKD,mBAAiBE,OACpB,MAAO,eACT,KAAKF,mBAAiBG,OACpB,MAAO,OACT,KAAKH,mBAAiBI,SACpB,MAAO,QACT,QACE,MAAO,UAEV,CAAC9E,IAEEgE,GAAQ,EAAAjE,YACZ,kBACEmE,EAAcI,IACV,EAAAS,aAAUT,EAAaU,MACvBV,EAAaN,QACnB,CAACM,IAGGW,GAAO,EAAAlF,YACX,kBAAOmE,EAAcI,GAAgBA,EAAaU,KAAOV,EAAaW,OACtE,CAACX,IAGGY,GAAa,EAAAnF,YAAQ,WACzB,OAAO,EAAA+B,WACLoC,EAAcI,GAAgBA,EAAaa,KAAOb,EAAac,MAC/DnD,OAAO,QACR,CAACqC,IAEEe,GAAS,EAAAC,kBAAef,EAAO,EAAI,GAEnCgB,GAAY,EAAAC,oBAAgB,iBAAC,iBAAO,CACxCpD,MAAO,EAAIzB,IAAI0E,EAAOI,MACtBhC,OAAQ,EAAI9C,IAAI0E,EAAOI,MACvBpD,gBAAiB7B,UAAOmD,IACxBD,aAAc,EAAI/C,MAzEO,OA0EzB,cAzEgBA,IAAC,OAFH0E,EAAM,YACL7E,UAAOmD,MAAG,uTAqEO,IAelC,OALA,EAAA+B,cAAU,WACHnB,IACLc,EAAOI,OAAQ,EAAAE,cAAW,EAAG,CAACC,SAAU,SACvC,CAACrB,IAGF,wBAAC,EAAA3D,KAAI,CAACC,MAAO,CAACC,cAAe,WAC3B,wBAAC,EAAAF,KAAI,CAACC,MAAO,CAACC,cAAe,MAAOI,WAAY,WAC9C,wBAAC,EAAAN,KAAI,CACHC,MAAO,CACLuB,MAAO,GAAKzB,IACZ8C,OAAQ,GAAK9C,IACb+C,aAAc,EAAI/C,IAClB0B,gBAAiB3C,EAAOc,UAAOE,QAAUF,UAAOC,QAChDS,WAAY,SACZD,eAAgB,SAChBK,YAAa,GAAKX,MAEpB,wBAAC,EAAAC,KAAI,CACHC,MAAO,CACL2C,SAAU,WACVvC,eAAgB,SAChBC,WAAY,SACZ2C,KAAM,EAAIlD,IACViD,OAAQ,EAAIjD,IACZyB,MAAO,EAAIzB,IACX8C,OAAQ,EAAI9C,MAEd,wBAAC,UAASC,KAAI,CAACC,MAAO,CAAC0E,MAEzB,wBAAC,UAAU,CAACjF,KAAMmE,EAAMlE,MAAOC,UAAO2B,UAAW1D,KAAM,GAAKkC,OAE9D,wBAAC,EAAAC,KAAI,CAACC,MAAO,CAACC,cAAe,SAAUM,KAAM,IAC3C,wBAAC,UAAI,CACHO,EAAG,GAAKhB,IACRY,EAAG7B,EAAOc,UAAOgB,QAAUhB,UAAOiB,QAClCC,EAAE,IACFE,cAAesC,EAAcI,GAAgB,EAAI,GAChDN,GAEH,wBAAC,UAAI,CACHrC,EAAG,GAAKhB,IACRY,EAAG7B,EAAOc,UAAOC,QAAUD,UAAOE,QAClCgB,EAAE,IACFE,cAAe,GACdsD,EACAhB,EAAcI,GACXA,EAAauB,aAAe,SAAQvB,EAAauB,YACjDrB,GAAc,SAAQA,OAI7BS,GACD,wBAAC,EAAArE,KAAI,CACHC,MAAO,CACLoD,UAAW,GAAKtD,IAChBmF,QAAS,GAAKnF,IACd+C,aAAc,EAAI/C,IAClB0B,gBAAiB3C,EAAOc,UAAOE,QAAUF,UAAOC,UAElD,wBAAC,EAAAsF,iBAAgB,CACfC,OAAQ,CACNC,KAAMhB,QASiB,EAAD,W,0FCzErB,SAAqB5E,EAAkBX,GAEpD,IADA,IAAMwG,EAAM7F,EAAS8F,MAAM,KAAKC,MAAOC,cAC9BC,EAAI,EAAGA,EAAIC,EAAWvH,OAAQsH,IAAK,CAC1C,MAA2BC,EAAWD,GAA/B7B,EAAI,EAAJA,KACP,GADuB,EAAV+B,WACEC,SAASP,GAAM,CAC5B,IAAM3F,EAASb,EAEX6G,EAAWD,GAAG/F,MADdgG,EAAWD,GAAGI,YAAcH,EAAWD,GAAG/F,MAE9C,OAAO,wBAAC,UAAU,CAACD,KAAMmE,EAAMlE,MAAOA,EAAO9B,KAAM,GAAKkC,OAG5D,OACE,wBAAC,UAAU,CAACL,KAAK,eAAeC,MAAOC,UAAOmG,QAASlI,KAAM,GAAKkC,OA7FtE,cACA,WACA,QACA,WAEM4F,EAAa,CACjB,CACE9B,KAAM,YACNlE,MAAOC,UAAOC,QACdiG,WAAYlG,UAAOE,QACnB8F,WAAY,CAAC,MAAO,MAAO,KAAM,QAEnC,CACE/B,KAAM,UACNlE,MAAOC,UAAOC,QACdiG,WAAYlG,UAAOE,QACnB8F,WAAY,CAAC,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,OAEtD,CACE/B,KAAM,YACNlE,MAAOC,UAAOoG,MACdJ,WAAY,CACV,MACA,IACA,MACA,KACA,MACA,KACA,IACA,MACA,MACA,OACA,OACA,KACA,OACA,MACA,KACA,MACA,MACA,KACA,KACA,QAGJ,CACE/B,KAAM,QACNlE,MAAOC,UAAOqG,UACdL,WAAY,CAAC,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,SAE1D,CACE/B,KAAM,QACNlE,MAAOC,UAAOqG,UACdL,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,SAEzD,CACE/B,KAAM,aACNlE,MAAOC,UAAOmD,IACd6C,WAAY,CAAC,MAAO,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,QAElE,CACE/B,KAAM,YACNlE,MAAOC,UAAOqG,UACdL,WAAY,CAAC,MAAO,OAAQ,OAAQ,QAEtC,CACE/B,KAAM,YACNlE,MAAO,UACPiG,WAAY,CAAC,QAEf,CACE/B,KAAM,eACNlE,MAAOC,UAAOsG,OACdN,WAAY,CAAC,MAAO,MAAO,OAAQ,SAErC,CACE/B,KAAM,QACNlE,MAAOC,UAAOuG,MACdP,WAAY,CAAC,MAAO,MAAO,OAAQ,W,gGC7EvC,MAGgD,8bAHhD,OACA,OACA,WACA,QAAgD,gIAEhD,IA0BE,EA1Ba,SAAH,GAA2C,IAAtC3G,EAAQ,EAARA,SACf,GAA4B,EAAAI,cAAWC,iBAAhCR,EAAI,EAAJA,KAAMsH,EAAW,EAAXA,YAEP5D,GAAU,EAAArD,YAAQ,WACtB,OAAOsD,aAAWC,OAAO,CACvB2D,OAAQ,CACN5E,gBAAiB3C,EAAOc,UAAOiB,QAAUjB,UAAOgB,QAChDJ,KAAM,OAGT,CAAC1B,IAEJ,OACE,wBAAC,EAAAkB,KAAI,CAACC,MAAO,CAACO,KAAM,IAClB,wBAAC,EAAA8F,UAAS,CACRC,SACiB,UAAfH,EACI,UACAtH,EACA,eACA,kBAGR,wBAAC,EAAAkB,KAAI,CAACC,MAAOuC,EAAQ6D,QAASpH,KAKd,EAAD,W,8GCjCrB,IAoBYuH,EApBZ,QAEA,EAagD,8bAbhD,OACA,OACA,QACA,WACA,QACA,QAEA,YACA,WACA,WACA,WAEA,SACA,QAAgD,gIAKzB,yBAAXA,OAAW,eAAXA,IAAW,0BAAXA,IAAW,cAAXA,EAAW,KAUvB,IA4IE,EA5I+B,SAAH,GAA6B,IAAxBpD,EAAK,EAALA,MAAOqD,EAAU,EAAVA,WACjC3H,GAAQ,EAAAO,cAAWC,iBAAnBR,KACD4H,GAAgB,EAAAC,gBACpB,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,iBAEhBI,GAAS,EAAAH,gBACb,SAAAC,GAAK,OAAIA,EAAMG,QAAQD,UAGnBE,GAAW,EAAAC,iBAEXC,GAAoB,EAAA/H,YAAgB,WACxC,OAAOuH,EAAcS,QAAO,SAAA5D,GAAC,OAAKA,EAAE6D,WAAShJ,SAC5C,CAACsI,IAEEW,GAAa,EAAAC,mBAEbC,GAAsB,EAAApI,YAC1B,kBAAOL,EAAO,aAAe,QAC7B,CAACA,IAGG0I,GAAc,EAAAC,gBAAY,WAC9BT,GAAS,EAAAU,aAAS,iBAAKZ,EAAO,CAACa,MAAO7I,EAAO,QAAU,aACtD,CAACA,EAAMgI,EAAQE,IAIZxE,GAAU,EAAArD,YAAQ,WACtB,OAAOsD,aAAWC,OAAO,CACvBkF,OAAQ,CACN1H,cAAe,MACf2H,iBAAkB,GAAK9H,IACvB+H,eAAgB,GAAK/H,IACrBO,WAAY,UAEdyH,cAAe,CACbvH,KAAM,EACNN,cAAe,MACfI,WAAY,UAEd0H,aAAc,CACZxH,KAAM,EACNN,cAAe,MACfG,eAAgB,UAElB4H,UAAW,CACT5H,eAAgB,gBAGnB,IAEH,OACE,wBAAC,EAAAL,KAAI,CAACC,MAAOuC,EAAQoF,QAClBnB,IAAeD,EAAY0B,KAC1B,gDACE,wBAAC,EAAAlI,KAAI,CAACC,MAAOuC,EAAQuF,eAEnB,wBAAC,UAAa,CACZ/I,QAAS,WACPqI,EAAWL,SAASmB,gBAAcC,kBAEpC,wBAAC,UAAc,CAAClF,OAAQ,EAAGjD,MAAO,CAACS,YAAa,GAAKX,MACnD,wBAAC,UAAU,CACTL,KAAK,SACL7B,KAAM,GAAKkC,IACXJ,MAAOb,EAAOc,UAAOgB,QAAUhB,UAAOiB,aAW9C,wBAAC,EAAAb,KAAI,CACHC,MAAK,iBACAuC,EAAQuF,cACRvF,EAAQwF,eAEb,wBAAC,UAAI,CACHrH,EAAG7B,EAAOc,UAAOgB,QAAUhB,UAAOiB,QAClCC,EAAE,IACFC,EAAG,GAAKhB,IACRiB,cAAe,GACdoC,IAGL,wBAAC,EAAApD,KAAI,CAACC,MAAK,iBAAMuC,EAAQuF,cAAkBvF,EAAQyF,YAC5B,WAApBI,mBACC,wBAAC,UAAa,CAACrJ,QAASwI,GACtB,wBAAC,UAAU,CACT9H,KAAM6H,EACN1J,KAAM,GAAKkC,IACXJ,MAAOb,EAAOc,UAAOgB,QAAUhB,UAAOiB,QACtCZ,MAAO,CAACS,YAAa,GAAKX,QAIhC,wBAAC,UAAa,CAACf,QAAS,kBAAMqI,EAAWiB,SAAS,YAChD,wBAAC,UAAU,CACT5I,KAAK,SACL7B,KAAM,GAAKkC,IACXJ,MAAOb,EAAOc,UAAOgB,QAAUhB,UAAOiB,QACtCZ,MAAO,CAACS,YAAa,GAAKX,QAG9B,wBAAC,UAAa,CAACf,QAAS,kBAAMqI,EAAWiB,SAAS,mBAChD,wBAAC,UAAc,CAACpF,OAAQgE,GACtB,wBAAC,UAAU,CACTxH,KAAK,OACL7B,KAAM,GAAKkC,IACXJ,MAAOb,EAAOc,UAAOgB,QAAUhB,UAAOiB,cAM9C4F,IAAeD,EAAY+B,UAC7B,gDACE,wBAAC,UAAa,CAACvJ,QAASqI,EAAWmB,QACjC,wBAAC,UAAU,CACT9I,KAAK,aACL7B,KAAM,GAAKkC,IACXJ,MAAOb,EAAOc,UAAOC,QAAUD,UAAOE,WAG1C,wBAAC,UAAI,CACHiB,EAAG,GAAKhB,IACRe,EAAE,IACFH,EAAG7B,EAAOc,UAAOgB,QAAUhB,UAAOiB,QAClCZ,MAAO,CAACQ,WAAY,GAAKV,MACxBqD,IAGH,OAKY,EAAD,W,0FChKN,SAA0B,GAMrC,IAAD,IALDqF,EAAQ,EAARA,SACA3J,EAAI,EAAJA,KAKO4J,GAAW,EAAA/B,gBAChB,SAAAC,GAAK,OAAIA,EAAM8B,WADVA,QAIP,OACE,wBAAC,EAAA1I,KAAI,KACU,OAAZyI,EACGC,EAAQrG,KAAI,SAAAtD,GAAM,aAChB,wBAAC,UAAsB,CACrBP,KAAM,CACJY,KAAM,MACNmD,KAAMxD,EAAO4J,UAAUpG,KAAOxD,EAAO4J,UAAUjJ,KAC/CA,KAAMX,EAAO4J,UAAUjJ,KACvBT,UAA6B,OAAnB,EAAAF,EAAO6J,mBAAY,EAAnB,EAAqBC,WAAY,IAE7CvG,IAAKvD,EAAO4J,UAAUpG,KAAOxD,EAAO4J,UAAUjJ,KAC9CZ,KAAMA,SAOP,OAHD,EAAA4J,EAAQI,MACN,SAAA/J,GAAM,OACJA,EAAO4J,UAAUpG,KAAOxD,EAAO4J,UAAUjJ,MAAQ+I,OACtC,OAAd,EAHD,EAGGG,mBAAF,EAHD,EAGiBC,WAAY,IAC7BxG,KAAI,SAAA7D,GAAI,OACR,wBAAC,UAAsB,CAACA,KAAMA,EAAM8D,IAAK9D,EAAK+D,KAAMzD,KAAMA,SA3CtE,cACA,OACA,QAEA,c,+GCLA,EAK+B,8bAL/B,OACA,OACA,WACA,QACA,WACA,WAA+B,gIAa/B,IAmEE,EAnE2B,SAAH,GAOnB,IAAD,IANJiK,gBAAQ,OAAQ,EAChBC,EAAK,EAALA,MACAC,EAAQ,EAARA,SAAS,EAAD,EACRC,oBAAY,MAAG,EAAC,EAChBpK,EAAI,EAAJA,KAAK,EAAD,EACJmB,aAAK,MAAG,GAAE,EAEV,GAA0C,EAAAiC,YAASgH,GAAa,qBAAzDC,EAAa,KAAEC,EAAgB,KAOhC5G,GAAU,EAAArD,YAAQ,WACtB,OAAOsD,aAAWC,OAAO,CACvB2G,UAAW,GACXN,SAAU,CACR1F,UAAW,GAAKtD,IAChBuJ,kBAAmB,GAAKvJ,KAE1BwJ,IAAK,GACLC,kBAAmB,CACjBnG,UAAW,EAAItD,IACf8C,OAAQ,EAAI9C,IACZ0B,gBAAiB7B,UAAO2B,eAG3B,CAACzC,EAAMiK,IAEV,OACE,wBAAC,EAAA/I,KAAI,KACH,wBAAC,EAAAyJ,WAAU,CACTC,sBAAqB,iBAChBlH,EAAQ6G,UACRpJ,EACC8I,EAAWvG,EAAQuG,SAAW,IAEpCY,YAAU,EACVC,gCAAgC,GAC/BZ,EAAM3G,KAAI,SAACkH,EAAK7D,GAAC,OAChB,wBAAC,EAAA1F,KAAI,CAACC,MAAOuC,EAAQ+G,IAAKjH,IAAKiH,EAAI1E,OACjC,wBAAC,UAAa,CACZ5E,MAAO,CAACS,YAAa,GAAKX,KAC1Bf,QAAS,kBAlCnBoK,EADcnL,EAmCkByH,QAjChCuD,EAAShL,GAFI,IAACA,IAoCJ,wBAAC,UAAI,CACH8C,EAAG,GAAKhB,IACRe,EAAE,IACFH,EACE+E,GAAKyD,EACDvJ,UAAO2B,UACPzC,EACAc,UAAOgB,QACPhB,UAAOiB,SAEZ0I,EAAIM,OAENnE,GAAKyD,EACJ,wBAAC,EAAAnJ,KAAI,CAACC,MAAOuC,EAAQgH,oBACnB,aASE,EAAD","file":"static/js/1.b808a9e3.chunk.js","sourcesContent":["import moment from 'moment';\nimport {File, getDownloadURL, MaterialItem} from 'open-polito-api/lib/material';\nimport React, {FC, ReactNode, useContext, useMemo} from 'react';\nimport {Pressable, View} from 'react-native';\nimport colors from '../colors';\nimport {DeviceContext} from '../context/Device';\nimport getFileIcon from '../utils/getFileIcon';\nimport TablerIcon from './core/TablerIcon';\nimport {p} from '../scaling';\nimport Text from './core/Text';\nimport PressableBase from './core/PressableBase';\nimport {Device} from 'open-polito-api/lib/device';\nimport openURL from '../utils/openUrl';\n\nexport type DirectoryItemProps = {\n  item: MaterialItem;\n  relativeDate?: boolean;\n  dark: boolean;\n  course?: string;\n  onPress?: Function;\n  children?: ReactNode;\n};\n\nconst sizes = ['B', 'kB', 'MB', 'GB', 'TB'];\n\nexport const computeSizeLabel = (size: number) => {\n  const _size = Math.floor(size);\n  const index = Math.min(\n    _size > 0 ? Math.floor(Math.floor(Math.log10(_size)) / 3) : 0,\n    sizes.length - 1,\n  );\n  return `${(_size / 10 ** (index === 0 ? 1 : 3 * index)).toFixed(2)} ${\n    sizes[index]\n  }`;\n};\n\nconst downloadFile = (device: Device, item: File) => {\n  getDownloadURL(device, item).then(url => openURL(url));\n};\n\nconst DirectoryItem: FC<DirectoryItemProps> = ({\n  item,\n  relativeDate = false, // show as \"X days/hours ago instead of plain date\"\n  dark,\n  course = '',\n  onPress = () => {},\n  children,\n}) => {\n  const sizeLabel = useMemo(() => {\n    return item.type === 'file' ? computeSizeLabel(item.size * 1000) : '';\n  }, [item]);\n\n  const {device} = useContext(DeviceContext);\n\n  const iconComponent = useMemo(() => {\n    return item.type === 'file' ? (\n      getFileIcon(item.filename, dark)\n    ) : (\n      <TablerIcon\n        name=\"folder\"\n        color={dark ? colors.gray200 : colors.gray700}\n        size={24 * p}\n      />\n    );\n  }, [item, dark]);\n\n  return (\n    <View\n      style={{\n        flexDirection: 'column',\n      }}>\n      <PressableBase\n        android_ripple={{color: colors.lightGray}}\n        onPress={() => {\n          item.type === 'file' ? () => downloadFile(device, item) : onPress();\n        }} // download file if file, otherwise use onPress prop\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          paddingVertical: 8,\n        }}>\n        <View\n          style={{\n            flexDirection: 'row',\n            alignItems: 'center',\n            flex: 1,\n          }}>\n          {iconComponent}\n          <View\n            style={{\n              flexDirection: 'column',\n              justifyContent: 'flex-start',\n              marginLeft: 10 * p,\n              flex: 1,\n            }}>\n            <View style={{marginRight: 10 * p}}>\n              <Text\n                c={dark ? colors.gray100 : colors.gray800}\n                w=\"m\"\n                s={12 * p}\n                numberOfLines={1}>\n                {item.name}\n              </Text>\n            </View>\n            {item.type === 'file' && (\n              <View style={{flexDirection: 'column', flex: 1}}>\n                <Text numberOfLines={1} w=\"r\" s={10 * p} c={colors.gray300}>\n                  {sizeLabel + ' · '}\n                  {relativeDate\n                    ? moment(item.creation_date).fromNow()\n                    : moment(item.creation_date).format('ll')}\n                  {course ? ` · ${course}` : ''}\n                </Text>\n              </View>\n            )}\n          </View>\n        </View>\n\n        {item.type === 'file' ? (\n          <Pressable\n            android_ripple={{color: colors.lightGray}}\n            onPress={() => downloadFile(device, item)}>\n            <TablerIcon\n              name=\"download\"\n              size={24 * p}\n              color={colors.accent300}\n            />\n          </Pressable>\n        ) : null}\n      </PressableBase>\n      {item.type === 'dir' ? (\n        <View style={{flexDirection: 'row'}}>\n          <View\n            style={{\n              width: 16 * p,\n              alignItems: 'flex-start',\n            }}>\n            <View\n              style={{\n                flex: 1,\n                marginLeft: 4 * p,\n                width: 2 * p,\n                backgroundColor: dark ? colors.gray600 : colors.gray300,\n              }}\n            />\n          </View>\n          <View style={{flex: 1}}>{children}</View>\n        </View>\n      ) : null}\n    </View>\n  );\n};\n\nexport default DirectoryItem;\n","import React, {useContext} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {View} from 'react-native';\nimport colors from '../colors';\nimport {DeviceContext} from '../context/Device';\nimport Text from './core/Text';\n\nexport default function NoContent() {\n  const {t} = useTranslation();\n\n  const {dark} = useContext(DeviceContext);\n\n  return (\n    <View style={{flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\n      <Text s={12} w=\"m\" c={dark ? colors.gray200 : colors.gray700}>\n        {t('noContent')}\n      </Text>\n    </View>\n  );\n}\n","import {decode} from 'html-entities';\n\nexport const htmlTags = /<\\/?\\w+[^>]*>/g;\n\nexport const stripHTML = (input: string): string => {\n  return decode(input).replace(htmlTags, '');\n};\n","import React, {useState} from 'react';\nimport {View} from 'react-native';\nimport DirectoryItem from './DirectoryItem';\nimport {MaterialItem} from 'open-polito-api/lib/material';\n\nexport default function DirectoryItemRecursive({\n  dark,\n  item,\n}: {\n  dark: boolean;\n  item: MaterialItem;\n}) {\n  const [opened, setOpened] = useState(false);\n\n  return (\n    <View>\n      {item.type == 'file' ? (\n        <DirectoryItem dark={dark} item={item} />\n      ) : (\n        <View>\n          <DirectoryItem\n            dark={dark}\n            item={item}\n            onPress={() => {\n              setOpened(!opened);\n            }}>\n            {opened\n              ? item.children.map(item => (\n                  <DirectoryItemRecursive\n                    dark={dark}\n                    key={item.code}\n                    item={item}\n                  />\n                ))\n              : []}\n          </DirectoryItem>\n        </View>\n      )}\n    </View>\n  );\n}\n","import React, {FC, ReactNode, useMemo} from 'react';\nimport {StyleSheet, View, ViewStyle} from 'react-native';\nimport colors from '../../colors';\nimport {p} from '../../scaling';\nimport Text from './Text';\n\n/**\n * Wraps a component inside a view showing a badge.\n *\n * The badge is hidden if the number is 0.\n *\n * @param param0\n * @returns\n */\nconst BadgeContainer: FC<{\n  children: ReactNode;\n  style?: ViewStyle;\n  number: number | string;\n}> = ({children, style = {}, number}) => {\n  const badgeText = useMemo(() => {\n    return typeof number === 'string' ? number : number > 99 ? '99+' : number;\n  }, [number]);\n\n  return (\n    <View style={{...style}}>\n      {children}\n      {badgeText !== 0 ? (\n        <View style={_styles.badge}>\n          <Text w=\"r\" s={10 * p} c={colors.gray100}>\n            {badgeText}\n          </Text>\n        </View>\n      ) : null}\n    </View>\n  );\n};\n\nconst _styles = StyleSheet.create({\n  badge: {\n    position: 'absolute',\n    width: 20 * p,\n    height: 20 * p,\n    borderRadius: 20 * p,\n    backgroundColor: colors.red,\n    right: -10 * p,\n    top: -10 * p,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default BadgeContainer;\n","import React, {FC, ReactNode} from 'react';\nimport {View, ViewStyle} from 'react-native';\nimport colors from '../colors';\nimport {p} from '../scaling';\nimport Text from './core/Text';\n\nexport type SectionParams = {\n  title: string;\n  dark: boolean;\n  style?: ViewStyle;\n  children: ReactNode;\n};\n\nconst Section = ({title, dark, style = {}, children}: SectionParams) => {\n  return (\n    <View style={{...style}}>\n      <Text s={12 * p} w=\"m\" c={dark ? colors.gray100 : colors.gray800}>\n        {title}\n      </Text>\n      <View style={{marginTop: 16 * p}}>{children}</View>\n    </View>\n  );\n};\n\nexport default Section;\n","import moment from 'moment';\nimport {Notification} from 'open-polito-api/lib/notifications';\nimport {NotificationType} from 'open-polito-api/lib/notifications';\nimport React, {FC, useEffect, useMemo} from 'react';\nimport {View} from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\nimport {RenderHTMLSource} from 'react-native-render-html';\nimport colors from '../colors';\nimport {p} from '../scaling';\nimport {ExtendedAlert} from '../types';\nimport {stripHTML} from '../utils/html';\nimport TablerIcon from './core/TablerIcon';\nimport Text from './core/Text';\n\nexport type NotificationParams = {\n  type: NotificationType | string;\n  notification: ExtendedAlert | Notification; // TODO add support for generic notifications (Notification type in API code)\n  dark: boolean;\n  read?: boolean;\n  courseName?: string;\n};\n\nconst isCourseAlert = (n: ExtendedAlert | Notification): n is ExtendedAlert => {\n  return (n as Notification).topic === undefined;\n};\n\nconst NotificationComponent: FC<NotificationParams> = ({\n  type,\n  notification,\n  dark,\n  read = true,\n  courseName = '',\n}) => {\n  const icon = useMemo(() => {\n    switch (type) {\n      case NotificationType.TEST:\n        return 'test-pipe';\n      case NotificationType.DIRECT:\n        return 'message-dots';\n      case NotificationType.NOTICE:\n        return 'bell';\n      case NotificationType.MATERIAL:\n        return 'files';\n      default:\n        return 'bell';\n    }\n  }, [type]);\n\n  const title = useMemo<string>(\n    () =>\n      isCourseAlert(notification)\n        ? stripHTML(notification.text)\n        : notification.title,\n    [notification],\n  );\n\n  const body = useMemo<string | null>(\n    () => (isCourseAlert(notification) ? notification.text : notification.body),\n    [notification],\n  );\n\n  const dateString = useMemo(() => {\n    return moment(\n      isCourseAlert(notification) ? notification.date : notification.time,\n    ).format('ll');\n  }, [notification]);\n\n  const offset = useSharedValue(read ? 0 : 1);\n\n  const animStyle = useAnimatedStyle(() => ({\n    width: 8 * p * offset.value,\n    height: 8 * p * offset.value,\n    backgroundColor: colors.red,\n    borderRadius: 8 * p,\n  }));\n\n  /**\n   * If read, hide red badge\n   */\n  useEffect(() => {\n    if (!read) return;\n    offset.value = withTiming(0, {duration: 200});\n  }, [read]);\n\n  return (\n    <View style={{flexDirection: 'column'}}>\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\n        <View\n          style={{\n            width: 32 * p,\n            height: 32 * p,\n            borderRadius: 4 * p,\n            backgroundColor: dark ? colors.gray700 : colors.gray200,\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginRight: 16 * p,\n          }}>\n          <View\n            style={{\n              position: 'absolute',\n              justifyContent: 'center',\n              alignItems: 'center',\n              top: -4 * p,\n              right: -4 * p,\n              width: 8 * p,\n              height: 8 * p,\n            }}>\n            <Animated.View style={[animStyle]} />\n          </View>\n          <TablerIcon name={icon} color={colors.accent300} size={16 * p} />\n        </View>\n        <View style={{flexDirection: 'column', flex: 1}}>\n          <Text\n            s={12 * p}\n            c={dark ? colors.gray100 : colors.gray800}\n            w=\"r\"\n            numberOfLines={isCourseAlert(notification) ? 1 : 2}>\n            {title}\n          </Text>\n          <Text\n            s={10 * p}\n            c={dark ? colors.gray200 : colors.gray700}\n            w=\"r\"\n            numberOfLines={2}>\n            {dateString}\n            {isCourseAlert(notification)\n              ? notification.course_name && ' · ' + notification.course_name\n              : courseName && ' · ' + courseName}\n          </Text>\n        </View>\n      </View>\n      {!!body && (\n        <View\n          style={{\n            marginTop: 12 * p,\n            padding: 16 * p,\n            borderRadius: 4 * p,\n            backgroundColor: dark ? colors.gray700 : colors.gray200,\n          }}>\n          <RenderHTMLSource\n            source={{\n              html: body,\n            }}\n          />\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default NotificationComponent;\n","import React from 'react';\nimport colors from '../colors';\nimport {p} from '../scaling';\nimport TablerIcon from '../ui/core/TablerIcon';\n\nconst FILE_TYPES = [\n  {\n    icon: 'file-text',\n    color: colors.gray200,\n    colorLight: colors.gray700,\n    extensions: ['csv', 'log', 'md', 'txt'],\n  },\n  {\n    icon: 'archive',\n    color: colors.gray200,\n    colorLight: colors.gray700,\n    extensions: ['7z', 'bz', 'gz', 'rar', 'tar', 'zip', 'xz'],\n  },\n  {\n    icon: 'file-code',\n    color: colors.black,\n    extensions: [\n      'asm',\n      'c',\n      'cpp',\n      'cs',\n      'css',\n      'go',\n      'h',\n      'hpp',\n      'htm',\n      'html',\n      'java',\n      'js',\n      'json',\n      'jsx',\n      'ts',\n      'tsx',\n      'php',\n      'py',\n      'rs',\n      'xml',\n    ],\n  },\n  {\n    icon: 'photo',\n    color: colors.gradient1,\n    extensions: ['bmp', 'gif', 'jpg', 'jpeg', 'png', 'svg', 'tiff'],\n  },\n  {\n    icon: 'movie',\n    color: colors.gradient1,\n    extensions: ['flv', 'mkv', 'mp4', 'mov', 'wmv', 'avi', 'webm'],\n  },\n  {\n    icon: 'headphones',\n    color: colors.red,\n    extensions: ['aac', 'alac', 'flac', 'm4a', 'mp3', 'ogg', 'wav', 'wma'],\n  },\n  {\n    icon: 'file-text',\n    color: colors.gradient1,\n    extensions: ['doc', 'docm', 'docx', 'odt'],\n  },\n  {\n    icon: 'file-text',\n    color: '#ff3848',\n    extensions: ['pdf'],\n  },\n  {\n    icon: 'presentation',\n    color: colors.orange,\n    extensions: ['odp', 'ppt', 'pptm', 'pptx'],\n  },\n  {\n    icon: 'table',\n    color: colors.green,\n    extensions: ['ods', 'xls', 'xlsm', 'xlsx'],\n  },\n];\n\nexport default function getFileIcon(filename: string, dark: boolean) {\n  const ext = filename.split('.').pop()!.toLowerCase();\n  for (let i = 0; i < FILE_TYPES.length; i++) {\n    const {icon, extensions} = FILE_TYPES[i];\n    if (extensions.includes(ext)) {\n      const color = !dark\n        ? FILE_TYPES[i].colorLight || FILE_TYPES[i].color\n        : FILE_TYPES[i].color;\n      return <TablerIcon name={icon} color={color} size={24 * p} />;\n    }\n  }\n  return (\n    <TablerIcon name=\"file-unknown\" color={colors.gray500} size={24 * p} />\n  );\n}\n","import React, {ReactNode, useContext, useMemo} from 'react';\nimport {StatusBar, StyleSheet, View} from 'react-native';\nimport colors from '../colors';\nimport {DeviceContext} from '../context/Device';\n\nconst Screen = ({children}: {children: ReactNode}) => {\n  const {dark, chosenTheme} = useContext(DeviceContext);\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      screen: {\n        backgroundColor: dark ? colors.gray800 : colors.gray100,\n        flex: 1,\n      },\n    });\n  }, [dark]);\n\n  return (\n    <View style={{flex: 1}}>\n      <StatusBar\n        barStyle={\n          chosenTheme == 'system'\n            ? 'default'\n            : dark\n            ? 'dark-content'\n            : 'light-content'\n        }\n      />\n      <View style={_styles.screen}>{children}</View>\n    </View>\n  );\n};\n\nexport default Screen;\n","import {useNavigation} from '@react-navigation/native';\nimport {Notification} from 'open-polito-api/lib/notifications';\nimport React, {FC, useCallback, useContext, useMemo} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {useDispatch, useSelector} from 'react-redux';\nimport colors from '../colors';\nimport {DeviceContext} from '../context/Device';\nimport {p} from '../scaling';\nimport {AppDispatch, RootState} from '../store/store';\nimport BadgeContainer from './core/BadgeContainer';\nimport PressableBase from './core/PressableBase';\nimport TablerIcon from './core/TablerIcon';\nimport Text from './core/Text';\nimport {DrawerActions} from '@react-navigation/native';\nimport {genericPlatform} from '../utils/platform';\nimport {setConfig} from '../store/sessionSlice';\nimport {Configuration} from '../defaultConfig';\n\n// TODO navigation to downloads\n\nexport enum HEADER_TYPE {\n  MAIN = 0,\n  SECONDARY = 1,\n}\n\nexport type HeaderParams = {\n  title: string;\n  headerType: HEADER_TYPE;\n};\n\nconst Header: FC<HeaderParams> = ({title, headerType}) => {\n  const {dark} = useContext(DeviceContext);\n  const notifications = useSelector<RootState, Notification[]>(\n    state => state.user.notifications,\n  );\n  const config = useSelector<RootState, Configuration>(\n    state => state.session.config,\n  );\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  const notificationCount = useMemo<number>(() => {\n    return notifications.filter(n => !n.is_read).length;\n  }, [notifications]);\n\n  const navigation = useNavigation();\n\n  const themeToggleIconName = useMemo(\n    () => (dark ? 'moon-stars' : 'sun'),\n    [dark],\n  );\n\n  const toggleTheme = useCallback(() => {\n    dispatch(setConfig({...config, theme: dark ? 'light' : 'dark'}));\n  }, [dark, config, dispatch]);\n\n  // TODO drawer notification count\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      header: {\n        flexDirection: 'row',\n        marginHorizontal: 12 * p,\n        marginVertical: 16 * p,\n        alignItems: 'center',\n      },\n      headerSection: {\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n      },\n      headerMiddle: {\n        flex: 2,\n        flexDirection: 'row',\n        justifyContent: 'center',\n      },\n      headerEnd: {\n        justifyContent: 'flex-end',\n      },\n    });\n  }, []);\n\n  return (\n    <View style={_styles.header}>\n      {headerType === HEADER_TYPE.MAIN ? (\n        <>\n          <View style={_styles.headerSection}>\n            {/* TODO add logic for badge number*/}\n            <PressableBase\n              onPress={() => {\n                navigation.dispatch(DrawerActions.toggleDrawer());\n              }}>\n              <BadgeContainer number={0} style={{marginRight: 16 * p}}>\n                <TablerIcon\n                  name=\"menu-2\"\n                  size={24 * p}\n                  color={dark ? colors.gray100 : colors.gray800}\n                />\n              </BadgeContainer>\n            </PressableBase>\n            {/* TODO download manager */}\n            {/* <TablerIcon\n              name=\"download\"\n              size={24 * p}\n              color={dark ? colors.gray100 : colors.gray800}\n            /> */}\n          </View>\n          <View\n            style={{\n              ..._styles.headerSection,\n              ..._styles.headerMiddle,\n            }}>\n            <Text\n              c={dark ? colors.gray100 : colors.gray800}\n              w=\"m\"\n              s={16 * p}\n              numberOfLines={1}>\n              {title}\n            </Text>\n          </View>\n          <View style={{..._styles.headerSection, ..._styles.headerEnd}}>\n            {genericPlatform !== 'mobile' && (\n              <PressableBase onPress={toggleTheme}>\n                <TablerIcon\n                  name={themeToggleIconName}\n                  size={24 * p}\n                  color={dark ? colors.gray100 : colors.gray800}\n                  style={{marginRight: 16 * p}}\n                />\n              </PressableBase>\n            )}\n            <PressableBase onPress={() => navigation.navigate('Search')}>\n              <TablerIcon\n                name=\"search\"\n                size={24 * p}\n                color={dark ? colors.gray100 : colors.gray800}\n                style={{marginRight: 16 * p}}\n              />\n            </PressableBase>\n            <PressableBase onPress={() => navigation.navigate('Notifications')}>\n              <BadgeContainer number={notificationCount}>\n                <TablerIcon\n                  name=\"bell\"\n                  size={24 * p}\n                  color={dark ? colors.gray100 : colors.gray800}\n                />\n              </BadgeContainer>\n            </PressableBase>\n          </View>\n        </>\n      ) : headerType === HEADER_TYPE.SECONDARY ? (\n        <>\n          <PressableBase onPress={navigation.goBack}>\n            <TablerIcon\n              name=\"arrow-left\"\n              size={24 * p}\n              color={dark ? colors.gray200 : colors.gray700}\n            />\n          </PressableBase>\n          <Text\n            s={16 * p}\n            w=\"m\"\n            c={dark ? colors.gray100 : colors.gray800}\n            style={{marginLeft: 16 * p}}>\n            {title}\n          </Text>\n        </>\n      ) : null}\n    </View>\n  );\n};\n\nexport default Header;\n","import {Directory, MaterialItem} from 'open-polito-api/lib/material';\nimport React, {useEffect, useState} from 'react';\nimport {View} from 'react-native';\nimport {useSelector} from 'react-redux';\nimport {RootState} from '../store/store';\nimport DirectoryItemRecursive from './DirectoryItemRecursive';\nimport NoContent from './NoContent';\nimport {CoursesState, CourseState} from '../store/coursesSlice';\nimport DirectoryItem from './DirectoryItem';\n\ntype MaterialDict = {[code: string]: MaterialItem};\n\nexport default function MaterialExplorer({\n  courseId,\n  dark,\n}: {\n  courseId: string; // Set to \"all\" to show all courses\n  dark: boolean;\n}) {\n  const {courses} = useSelector<RootState, CoursesState>(\n    state => state.courses,\n  );\n\n  return (\n    <View>\n      {courseId == 'all'\n        ? courses.map(course => (\n            <DirectoryItemRecursive\n              item={{\n                type: 'dir',\n                code: course.basicInfo.code + course.basicInfo.name,\n                name: course.basicInfo.name,\n                children: course.extendedInfo?.material || [],\n              }}\n              key={course.basicInfo.code + course.basicInfo.name}\n              dark={dark}\n            />\n          ))\n        : (\n            courses.find(\n              course =>\n                course.basicInfo.code + course.basicInfo.name == courseId,\n            )?.extendedInfo?.material || []\n          ).map(item => (\n            <DirectoryItemRecursive item={item} key={item.code} dark={dark} />\n          ))}\n    </View>\n  );\n}\n","import React, {FC, useMemo, useState} from 'react';\nimport {ScrollView, StyleSheet, View, ViewStyle} from 'react-native';\nimport colors from '../colors';\nimport {p} from '../scaling';\nimport PressableBase from './core/PressableBase';\nimport Text from './core/Text';\n\n// TODO animation\n\nexport type TabsParams = {\n  adjusted?: boolean; // Proper margins\n  items: {label: string; value: string}[];\n  onChange: (i: number) => any;\n  defaultIndex?: number;\n  dark: boolean;\n  style?: ViewStyle;\n};\n\nconst Tabs: FC<TabsParams> = ({\n  adjusted = false,\n  items,\n  onChange,\n  defaultIndex = 0,\n  dark,\n  style = {},\n}) => {\n  const [selectedIndex, setSelectedIndex] = useState(defaultIndex);\n\n  const select = (index: number) => {\n    setSelectedIndex(index);\n    onChange(index);\n  };\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      container: {},\n      adjusted: {\n        marginTop: 24 * p,\n        paddingHorizontal: 16 * p,\n      },\n      tab: {},\n      selectedIndicator: {\n        marginTop: 4 * p,\n        height: 2 * p,\n        backgroundColor: colors.accent300,\n      },\n    });\n  }, [dark, adjusted]);\n\n  return (\n    <View>\n      <ScrollView\n        contentContainerStyle={{\n          ..._styles.container,\n          ...style,\n          ...(adjusted ? _styles.adjusted : {}),\n        }}\n        horizontal\n        showsHorizontalScrollIndicator={false}>\n        {items.map((tab, i) => (\n          <View style={_styles.tab} key={tab.value}>\n            <PressableBase\n              style={{marginRight: 24 * p}}\n              onPress={() => select(i)}>\n              <Text\n                s={12 * p}\n                w=\"m\"\n                c={\n                  i == selectedIndex\n                    ? colors.accent300\n                    : dark\n                    ? colors.gray100\n                    : colors.gray800\n                }>\n                {tab.label}\n              </Text>\n              {i == selectedIndex ? (\n                <View style={_styles.selectedIndicator} />\n              ) : null}\n            </PressableBase>\n          </View>\n        ))}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default Tabs;\n"],"sourceRoot":""}