{"version":3,"sources":["asyncHookWrappers.ts","devicesWithDynamicIsland.ts","devicesWithNotch.ts","nativeInterface.ts","supported-platform-info.ts","index.ts","index.js"],"names":["useOnMount","asyncGetter","initialResult","useState","loading","result","response","setResponse","useEffect","deviceInfoEmitter","NativeEventEmitter","NativeModules","RNDeviceInfo","devicesWithDynamicIsland","brand","model","devicesWithNotch","Platform","OS","require","Error","memo","getSupportedFunction","supportedPlatforms","getter","defaultGetter","supportedMap","filter","key","forEach","select","default","getSupportedPlatformInfoSync","defaultValue","memoKey","undefined","output","getSupportedPlatformInfoAsync","Promise","resolve","getSupportedPlatformInfoFunctions","syncGetter","asyncParams","getUniqueId","getUniqueIdSync","syncUniqueId","getInstanceId","getInstanceIdSync","getSerialNumber","getSerialNumberSync","getAndroidId","getAndroidIdSync","getIpAddress","getIpAddressSync","isCameraPresent","isCameraPresentSync","getMacAddress","getSystemManufacturer","getSystemManufacturerSync","getManufacturer","getManufacturerSync","getModel","getBrand","getBuildId","getBuildIdSync","getApiLevel","getApiLevelSync","getInstallerPackageName","getInstallerPackageNameSync","getBuildNumber","buildNumber","getVersion","appVersion","notch","dynamicIsland","getDeviceName","getDeviceNameSync","getUsedMemory","getUsedMemorySync","getFontScale","getFontScaleSync","getBootloader","getBootloaderSync","getDevice","getDeviceSync","getDisplay","getDisplaySync","getFingerprint","getFingerprintSync","getHardware","getHardwareSync","getHost","getHostSync","getProduct","getProductSync","getTags","getTagsSync","getType","getTypeSync","getBaseOs","getBaseOsSync","getPreviewSdkInt","getPreviewSdkIntSync","getSecurityPatch","getSecurityPatchSync","getCodename","getCodenameSync","getIncremental","getIncrementalSync","isEmulator","isEmulatorSync","isPinOrFingerprintSet","isPinOrFingerprintSetSync","hasGms","hasGmsSync","hasHms","hasHmsSync","getFirstInstallTime","getFirstInstallTimeSync","getInstallReferrer","getInstallReferrerSync","getLastUpdateTime","getLastUpdateTimeSync","getPhoneNumber","getPhoneNumberSync","getCarrier","getCarrierSync","getTotalMemory","getTotalMemorySync","getMaxMemory","getMaxMemorySync","getTotalDiskCapacity","getTotalDiskCapacitySync","getTotalDiskCapacityOld","getFreeDiskStorage","getFreeDiskStorageSync","getFreeDiskStorageOld","getBatteryLevel","getBatteryLevelSync","getPowerState","getPowerStateSync","isBatteryCharging","isBatteryChargingSync","isLandscapeSync","Dimensions","get","height","width","isAirplaneMode","isAirplaneModeSync","getSupportedAbis","getSupportedAbisSync","supportedAbis","supportedAbisSync","getSupported32BitAbis","getSupported32BitAbisSync","supported32BitAbis","supported32BitAbisSync","getSupported64BitAbis","getSupported64BitAbisSync","supported64BitAbis","supported64BitAbisSync","hasSystemFeature","feature","getSystemAvailableFeatures","getSystemAvailableFeaturesSync","isLocationEnabled","isLocationEnabledSync","isHeadphonesConnected","isHeadphonesConnectedSync","isMouseConnected","isMouseConnectedSync","isKeyboardConnected","isKeyboardConnectedSync","getAvailableLocationProviders","getAvailableLocationProvidersSync","getBrightness","getBrightnessSync","getDeviceToken","deviceInfoModule","getApplicationName","appName","getBundleId","bundleId","getDeviceId","deviceId","getDeviceType","deviceType","getFreeDiskStorageOldSync","getMacAddressSync","getReadableVersion","getSystemName","ios","systemName","android","windows","getSystemVersion","systemVersion","getTotalDiskCapacityOldSync","getUserAgent","getUserAgentSync","hasNotch","_brand","_model","findIndex","item","toLowerCase","hasDynamicIsland","hasSystemFeatureSync","isLandscape","isTabletMode","isTablet","useBatteryLevel","batteryLevel","setBatteryLevel","initialValue","subscription","addListener","level","remove","useBatteryLevelIsLow","batteryLevelIsLow","setBatteryLevelIsLow","useDeviceName","useFirstInstallTime","useHasSystemFeature","useCallback","useIsEmulator","usePowerState","powerState","setPowerState","state","useManufacturer","useIsHeadphonesConnected","eventName","setResult","useBrightness","brightness","setBrightness","value","batteryCharging","_readPowerState","battery","charging","lowPowerMode","batteryState","chargingtime","dischargingtime","window","performance","memory","jsHeapSizeLimit","document","referrer","navigator","onLine","userAgent","geolocation","deviceMemory","usedJSHeapSize","getBattery","then","addEventListener","emit","mediaDevices","enumerateDevices","devices","find","d","kind","console","log","platform","os","indexOf","test","storage","estimate","quota","usage"],"mappings":"mKASO,SAASA,EAAcC,EAA+BC,GAC3D,MAAgCC,mBAA6B,CAC3DC,SAAS,EACTC,OAAQH,IAFV,WAAOI,EAAD,KAAWC,EAAX,KAeN,OAVAC,qBAAU,WAER,IAAc,UAAG,YACf,IAAMH,QAAeJ,IACrBM,EAAY,CAAEH,SAAS,EAAOC,cAFhC,WAAc,qCAMb,CAACJ,IAEGK,EAGF,IAAMG,EAAoB,IAAIC,IAAmBC,IAAcC,cC1BtE,IAWeC,EAXiC,CAC9C,CACEC,MAAO,QACPC,MAAO,iBAET,CACED,MAAO,QACPC,MAAO,sBCwVIC,EA/VyB,CACtC,CACEF,MAAO,QACPC,MAAO,aAET,CACED,MAAO,QACPC,MAAO,kBAET,CACED,MAAO,QACPC,MAAO,iBAET,CACED,MAAO,QACPC,MAAO,qBAET,CACED,MAAO,QACPC,MAAO,kBAET,CACED,MAAO,QACPC,MAAO,aAET,CACED,MAAO,QACPC,MAAO,iBAET,CACED,MAAO,QACPC,MAAO,qBAET,CACED,MAAO,QACPC,MAAO,kBAET,CACED,MAAO,QACPC,MAAO,aAET,CACED,MAAO,QACPC,MAAO,iBAET,CACED,MAAO,QACPC,MAAO,qBAET,CACED,MAAO,QACPC,MAAO,aAET,CACED,MAAO,QACPC,MAAO,iBAET,CACED,MAAO,QACPC,MAAO,qBAET,CACED,MAAO,QACPC,MAAO,YAET,CACED,MAAO,QACPC,MAAO,aAET,CACED,MAAO,QACPC,MAAO,iBAET,CACED,MAAO,QACPC,MAAO,aAET,CACED,MAAO,OACPC,MAAO,aAET,CACED,MAAO,OACPC,MAAO,cAET,CACED,MAAO,SACPC,MAAO,cAET,CACED,MAAO,SACPC,MAAO,YAET,CACED,MAAO,SACPC,MAAO,OAET,CACED,MAAO,SACPC,MAAO,YAET,CACED,MAAO,SACPC,MAAO,YAET,CACED,MAAO,SACPC,MAAO,WAET,CACED,MAAO,SACPC,MAAO,WAET,CACED,MAAO,SACPC,MAAO,WAET,CACED,MAAO,SACPC,MAAO,cAET,CACED,MAAO,SACPC,MAAO,YAET,CACED,MAAO,SACPC,MAAO,gBAET,CACED,MAAO,SACPC,MAAO,eAET,CACED,MAAO,SACPC,MAFF,WAIA,CACED,MAAO,SACPC,MAAO,YAET,CACED,MAAO,SACPC,MAAO,WAET,CACED,MAAO,SACPC,MAFF,WAIA,CACED,MAAO,SACPC,MAAO,UAET,CACED,MAAO,SACPC,MAAO,WAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,KACPC,MAAO,MAET,CACED,MAAO,KACPC,MAAO,YAET,CACED,MAAO,KACPC,MAAO,aAET,CACED,MAAO,KACPC,MAFF,WAIA,CACED,MAAO,KACPC,MAFF,WAIA,CACED,MAAO,KACPC,MAFF,WAIA,CACED,MAAO,WACPC,MAAO,gBAET,CACED,MAAO,WACPC,MAAO,iBAET,CACED,MAAO,WACPC,MAAO,OAET,CACED,MAAO,WACPC,MAAO,uBAET,CACED,MAAO,QACPC,MAAO,YAET,CACED,MAAO,QACPC,MAAO,kBAET,CACED,MAAO,QACPC,MAAO,OAET,CACED,MAAO,QACPC,MAAO,OAET,CACED,MAAO,UACPC,MAAO,KAET,CACED,MAAO,UACPC,MAAO,SAET,CACED,MAAO,UACPC,MAAO,SAET,CACED,MAAO,UACPC,MAAO,iBAET,CACED,MAAO,UACPC,MAAO,iBAET,CACED,MAAO,UACPC,MAAO,iBAET,CACED,MAAO,UACPC,MAAO,iBAET,CACED,MAAO,OACPC,MAAO,OAET,CACED,MAAO,OACPC,MAAO,WAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,OAET,CACED,MAAO,QACPC,MAAO,aAET,CACED,MAAO,QACPC,MAAO,YAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,OAET,CACED,MAAO,OACPC,MAAO,UAET,CACED,MAAO,SACPC,MAAO,QAET,CACED,MAAO,SACPC,MAAO,yBAET,CACED,MAAO,SACPC,MAAO,WAET,CACED,MAAO,SACPC,MAAO,WAET,CACED,MAAO,SACPC,MAAO,aAET,CACED,MAAO,SACPC,M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","file":"static/js/1.f6419705.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport type { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n\nexport const deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\n/**\n * simple hook wrapper for handling events\n * @param eventName\n * @param initialValueAsyncGetter\n * @param defaultValue\n */\nexport function useOnEvent<T>(\n  eventName: string,\n  initialValueAsyncGetter: () => Promise<T>,\n  defaultValue: T\n): AsyncHookResult<T> {\n  const { loading, result: initialResult } = useOnMount(initialValueAsyncGetter, defaultValue);\n  const [result, setResult] = useState<T>(defaultValue);\n\n  // sets the result to what the intial value is on mount\n  useEffect(() => {\n    setResult(initialResult);\n  }, [initialResult]);\n\n  // - set up the event listener to set the result\n  // - set up the clean up function to remove subscription on unmount\n  useEffect(() => {\n    const subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return () => subscription.remove();\n  }, [eventName]);\n\n  // loading will only be true while getting the inital value. After that, it will always be false, but a new result may occur\n  return { loading, result };\n}\n","import { NotchDevice } from './privateTypes';\n\nconst devicesWithDynamicIsland: NotchDevice[] = [\n  {\n    brand: 'Apple',\n    model: 'iPhone 14 Pro',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 14 Pro Max',\n  },\n];\n\nexport default devicesWithDynamicIsland;\n","import { NotchDevice } from './privateTypes';\n\nconst devicesWithNotch: NotchDevice[] = [\n  {\n    brand: 'Apple',\n    model: 'iPhone 14',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 14 Plus',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 14 Pro',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 14 Pro Max',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 13 mini',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 13',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 13 Pro',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 13 Pro Max',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 12 mini',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 12',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 12 Pro',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 12 Pro Max',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 11',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 11 Pro',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone 11 Pro Max',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone X',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone XS',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone XS Max',\n  },\n  {\n    brand: 'Apple',\n    model: 'iPhone XR',\n  },\n  {\n    brand: 'Asus',\n    model: 'ZenFone 5',\n  },\n  {\n    brand: 'Asus',\n    model: 'ZenFone 5z',\n  },\n  {\n    brand: 'google',\n    model: 'Pixel 3 XL',\n  },\n  {\n    brand: 'google',\n    model: 'Pixel 4a',\n  },\n  {\n    brand: 'Huawei',\n    model: 'P20',\n  },\n  {\n    brand: 'Huawei',\n    model: 'P20 Plus',\n  },\n  {\n    brand: 'Huawei',\n    model: 'P20 Lite',\n  },\n  {\n    brand: 'Huawei',\n    model: 'ANE-LX1',\n  },\n  {\n    brand: 'Huawei',\n    model: 'INE-LX1',\n  },\n  {\n    brand: 'Huawei',\n    model: 'POT-LX1',\n  },\n  {\n    brand: 'Huawei',\n    model: 'Honor Play',\n  },\n  {\n    brand: 'Huawei',\n    model: 'Honor 10',\n  },\n  {\n    brand: 'Huawei',\n    model: 'Mate 20 Lite',\n  },\n  {\n    brand: 'Huawei',\n    model: 'Mate 20 Pro',\n  },\n  {\n    brand: 'Huawei',\n    model: 'ELE-L29', // P30\n  },\n  {\n    brand: 'Huawei',\n    model: 'P30 Lite',\n  },\n  {\n    brand: 'Huawei',\n    model: 'P30 Pro',\n  },\n  {\n    brand: 'Huawei',\n    model: 'JNY-LX1', // P40 Lite\n  },\n  {\n    brand: 'Huawei',\n    model: 'Nova 3',\n  },\n  {\n    brand: 'Huawei',\n    model: 'Nova 3i',\n  },\n  {\n    brand: 'Leagoo',\n    model: 'S9',\n  },\n  {\n    brand: 'LG',\n    model: 'G7',\n  },\n  {\n    brand: 'LG',\n    model: 'G7 ThinQ',\n  },\n  {\n    brand: 'LG',\n    model: 'G7+ ThinQ',\n  },\n  {\n    brand: 'LG',\n    model: 'LM-Q910', //G7 One\n  },\n  {\n    brand: 'LG',\n    model: 'LM-G710', //G7 ThinQ\n  },\n  {\n    brand: 'LG',\n    model: 'LM-V405', //V40 ThinQ\n  },\n  {\n    brand: 'Motorola',\n    model: 'Moto g7 Play',\n  },\n  {\n    brand: 'Motorola',\n    model: 'Moto g7 Power',\n  },\n  {\n    brand: 'Motorola',\n    model: 'One',\n  },\n  {\n    brand: 'Motorola',\n    model: 'Motorola One Vision',\n  },\n  {\n    brand: 'Nokia',\n    model: '5.1 Plus',\n  },\n  {\n    brand: 'Nokia',\n    model: 'Nokia 6.1 Plus',\n  },\n  {\n    brand: 'Nokia',\n    model: '7.1',\n  },\n  {\n    brand: 'Nokia',\n    model: '8.1',\n  },\n  {\n    brand: 'OnePlus',\n    model: '6',\n  },\n  {\n    brand: 'OnePlus',\n    model: 'A6003',\n  },\n  {\n    brand: 'ONEPLUS',\n    model: 'A6000',\n  },\n  {\n    brand: 'OnePlus',\n    model: 'OnePlus A6003',\n  },\n  {\n    brand: 'OnePlus',\n    model: 'ONEPLUS A6010',\n  },\n  {\n    brand: 'OnePlus',\n    model: 'ONEPLUS A6013',\n  },\n  {\n    brand: 'OnePlus',\n    model: 'ONEPLUS A6000',\n  },\n  {\n    brand: 'Oppo',\n    model: 'R15',\n  },\n  {\n    brand: 'Oppo',\n    model: 'R15 Pro',\n  },\n  {\n    brand: 'Oppo',\n    model: 'F7',\n  },\n  {\n    brand: 'Oukitel',\n    model: 'U18',\n  },\n  {\n    brand: 'Redmi',\n    model: 'M2004J19C',\n  },\n  {\n    brand: 'Sharp',\n    model: 'Aquos S3',\n  },\n  {\n    brand: 'Vivo',\n    model: 'V9',\n  },\n  {\n    brand: 'Vivo',\n    model: 'X21',\n  },\n  {\n    brand: 'Vivo',\n    model: 'X21 UD',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'MI 8',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'MI 8 Explorer Edition',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'MI 8 SE',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'MI 8 UD',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'MI 8 Lite',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'Mi 9',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'POCO F1',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'POCOPHONE F1',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'Redmi 6 Pro',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'Redmi Note 7',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'Redmi 7',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'Redmi Note 8',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'Redmi Note 8 Pro',\n  },\n  {\n    brand: 'xiaomi',\n    model: 'Mi A2 Lite',\n  },\n  {\n    brand: 'Blackview',\n    model: 'A30',\n  },\n  {\n    brand: 'Samsung',\n    model: 'SM-A217F',\n  },\n  {\n    brand: 'Samsung',\n    model: 'SM-A715F',\n  },\n];\n\nexport default devicesWithNotch;\n","import { Platform, NativeModules } from 'react-native';\nimport { DeviceInfoNativeModule } from './privateTypes';\n\nlet RNDeviceInfo: DeviceInfoNativeModule | undefined = NativeModules.RNDeviceInfo;\n\n// @ts-ignore\nif (Platform.OS === 'web' || Platform.OS === 'dom') {\n  RNDeviceInfo = require('../web');\n}\n\nif (!RNDeviceInfo) {\n  // Produce an error if we don't have the native module\n  if (\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios' ||\n    Platform.OS === 'web' ||\n    // @ts-ignore\n    Platform.OS === 'dom'\n  ) {\n    throw new Error(`react-native-device-info: NativeModule.RNDeviceInfo is null. To fix this issue try these steps:\n  • For react-native <= 0.59: Run \\`react-native link react-native-device-info\\` in the project root.\n  • Rebuild and re-run the app.\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n  If none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-device-info/react-native-device-info`);\n  }\n}\n\nexport default RNDeviceInfo as DeviceInfoNativeModule;\n","import { Platform } from 'react-native';\n\nimport {\n  PlatformArray,\n  Getter,\n  GetSupportedPlatformInfoAsyncParams,\n  GetSupportedPlatformInfoSyncParams,\n  GetSupportedPlatformInfoFunctionsParams,\n} from './privateTypes';\n\ntype MemoType = { [key: string]: any };\n// centralized memo object\nlet memo: MemoType = {};\n\nexport function clearMemo() {\n  memo = {};\n}\n\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\nfunction getSupportedFunction<T>(\n  supportedPlatforms: PlatformArray,\n  getter: Getter<T>,\n  defaultGetter: Getter<T>\n): Getter<T> {\n  let supportedMap: any = {};\n  supportedPlatforms\n    .filter((key) => Platform.OS == key)\n    .forEach((key) => (supportedMap[key] = getter));\n  return Platform.select({\n    ...supportedMap,\n    default: defaultGetter,\n  });\n}\n\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\nexport function getSupportedPlatformInfoSync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoSyncParams<T>): T {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n    return output;\n  }\n}\n\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\nexport async function getSupportedPlatformInfoAsync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoAsyncParams<T>): Promise<T> {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () =>\n      Promise.resolve(defaultValue)\n    )();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\nexport function getSupportedPlatformInfoFunctions<T>({\n  syncGetter,\n  ...asyncParams\n}: GetSupportedPlatformInfoFunctionsParams<T>): [Getter<Promise<T>>, Getter<T>] {\n  return [\n    () => getSupportedPlatformInfoAsync(asyncParams),\n    () => getSupportedPlatformInfoSync({ ...asyncParams, getter: syncGetter }),\n  ];\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnEvent, useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithDynamicIsland from \"./internal/devicesWithDynamicIsland\";\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport {\n  getSupportedPlatformInfoAsync,\n  getSupportedPlatformInfoFunctions,\n  getSupportedPlatformInfoSync,\n} from './internal/supported-platform-info';\nimport { DeviceInfoModule } from './internal/privateTypes';\nimport type {\n  AsyncHookResult,\n  DeviceType,\n  LocationProviderInfo,\n  PowerState,\n} from './internal/types';\n\nexport const [getUniqueId, getUniqueIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'uniqueId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getUniqueId(),\n  syncGetter: () => RNDeviceInfo.getUniqueIdSync(),\n  defaultValue: 'unknown',\n});\n\nlet uniqueId: string;\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = await getUniqueId();\n  }\n  return uniqueId;\n}\n\nexport const [getInstanceId, getInstanceIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getInstanceId(),\n  syncGetter: () => RNDeviceInfo.getInstanceIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getSerialNumber, getSerialNumberSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getSerialNumber(),\n  syncGetter: () => RNDeviceInfo.getSerialNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getAndroidId, getAndroidIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getAndroidId(),\n  syncGetter: () => RNDeviceInfo.getAndroidIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIpAddress, getIpAddressSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getIpAddress(),\n  syncGetter: () => RNDeviceInfo.getIpAddressSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isCameraPresent, isCameraPresentSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isCameraPresent(),\n  syncGetter: () => RNDeviceInfo.isCameraPresentSync(),\n  defaultValue: false,\n});\n\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport const getDeviceId = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'deviceId',\n    getter: () => RNDeviceInfo.deviceId,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const [getManufacturer, getManufacturerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () =>\n    Platform.OS == 'ios' ? Promise.resolve('Apple') : RNDeviceInfo.getSystemManufacturer(),\n  syncGetter: () => (Platform.OS == 'ios' ? 'Apple' : RNDeviceInfo.getSystemManufacturerSync()),\n  defaultValue: 'unknown',\n});\n\nexport const getModel = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'model',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    getter: () => RNDeviceInfo.model,\n  });\n\nexport const getBrand = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'brand',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.brand,\n  });\n\nexport const getSystemName = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    memoKey: 'systemName',\n    getter: () =>\n      Platform.select({\n        ios: RNDeviceInfo.systemName,\n        android: 'Android',\n        windows: 'Windows',\n        default: 'unknown',\n      }),\n  });\n\nexport const getSystemVersion = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.systemVersion,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'systemVersion',\n  });\n\nexport const [getBuildId, getBuildIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getBuildId(),\n  syncGetter: () => RNDeviceInfo.getBuildIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getApiLevel, getApiLevelSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getApiLevel(),\n  syncGetter: () => RNDeviceInfo.getApiLevelSync(),\n  defaultValue: -1,\n});\n\nexport const getBundleId = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'bundleId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.bundleId,\n  });\n\nexport const [\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows', 'ios'],\n  getter: () => RNDeviceInfo.getInstallerPackageName(),\n  syncGetter: () => RNDeviceInfo.getInstallerPackageNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const getApplicationName = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'appName',\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.appName,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const getBuildNumber = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'buildNumber',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.buildNumber,\n    defaultValue: 'unknown',\n  });\n\nexport const getVersion = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'version',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.appVersion,\n  });\n\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\n\nexport const [getDeviceName, getDeviceNameSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getDeviceName(),\n  syncGetter: () => RNDeviceInfo.getDeviceNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getUsedMemory, getUsedMemorySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getUsedMemory(),\n  syncGetter: () => RNDeviceInfo.getUsedMemorySync(),\n  defaultValue: -1,\n});\n\nexport const getUserAgent = () =>\n  getSupportedPlatformInfoAsync({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'web'],\n    getter: () => RNDeviceInfo.getUserAgent(),\n  });\n\nexport const getUserAgentSync = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'web'],\n    getter: () => RNDeviceInfo.getUserAgentSync(),\n  });\n\nexport const [getFontScale, getFontScaleSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getFontScale(),\n  syncGetter: () => RNDeviceInfo.getFontScaleSync(),\n  defaultValue: -1,\n});\n\nexport const [getBootloader, getBootloaderSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getBootloader(),\n  syncGetter: () => RNDeviceInfo.getBootloaderSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getDevice, getDeviceSync] = getSupportedPlatformInfoFunctions({\n  getter: () => RNDeviceInfo.getDevice(),\n  syncGetter: () => RNDeviceInfo.getDeviceSync(),\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android'],\n});\n\nexport const [getDisplay, getDisplaySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getDisplay(),\n  syncGetter: () => RNDeviceInfo.getDisplaySync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getFingerprint, getFingerprintSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getFingerprint(),\n  syncGetter: () => RNDeviceInfo.getFingerprintSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHardware, getHardwareSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHardware(),\n  syncGetter: () => RNDeviceInfo.getHardwareSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHost, getHostSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHost(),\n  syncGetter: () => RNDeviceInfo.getHostSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getProduct, getProductSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getProduct(),\n  syncGetter: () => RNDeviceInfo.getProductSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTags, getTagsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getTags(),\n  syncGetter: () => RNDeviceInfo.getTagsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getType, getTypeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getType(),\n  syncGetter: () => RNDeviceInfo.getTypeSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getBaseOs, getBaseOsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: () => RNDeviceInfo.getBaseOs(),\n  syncGetter: () => RNDeviceInfo.getBaseOsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getPreviewSdkInt, getPreviewSdkIntSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPreviewSdkInt(),\n  syncGetter: () => RNDeviceInfo.getPreviewSdkIntSync(),\n  defaultValue: -1,\n});\n\nexport const [getSecurityPatch, getSecurityPatchSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSecurityPatch(),\n  syncGetter: () => RNDeviceInfo.getSecurityPatchSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCodename, getCodenameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getCodename(),\n  syncGetter: () => RNDeviceInfo.getCodenameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIncremental, getIncrementalSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getIncremental(),\n  syncGetter: () => RNDeviceInfo.getIncrementalSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isEmulator, isEmulatorSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isEmulator(),\n  syncGetter: () => RNDeviceInfo.isEmulatorSync(),\n  defaultValue: false,\n});\n\nexport const isTablet = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: false,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'tablet',\n    getter: () => RNDeviceInfo.isTablet,\n  });\n\nexport const [isPinOrFingerprintSet, isPinOrFingerprintSetSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.isPinOrFingerprintSet(),\n    syncGetter: () => RNDeviceInfo.isPinOrFingerprintSetSync(),\n    defaultValue: false,\n  }\n);\n\nlet notch: boolean;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n    let _model = getModel();\n    notch =\n      devicesWithNotch.findIndex(\n        (item) =>\n          item.brand.toLowerCase() === _brand.toLowerCase() &&\n          item.model.toLowerCase() === _model.toLowerCase()\n      ) !== -1;\n  }\n  return notch;\n}\n\nlet dynamicIsland: boolean;\nexport function hasDynamicIsland() {\n  if (dynamicIsland === undefined) {\n    let _brand = getBrand();\n    let _model = getModel();\n    dynamicIsland =\n      devicesWithDynamicIsland.findIndex(\n        (item) =>\n          item.brand.toLowerCase() === _brand.toLowerCase() &&\n          item.model.toLowerCase() === _model.toLowerCase()\n      ) !== -1;\n  }\n  return dynamicIsland;\n}\n\nexport const [hasGms, hasGmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasGms(),\n  syncGetter: () => RNDeviceInfo.hasGmsSync(),\n  defaultValue: false,\n});\n\nexport const [hasHms, hasHmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasHms(),\n  syncGetter: () => RNDeviceInfo.hasHmsSync(),\n  defaultValue: false,\n});\n\nexport const [getFirstInstallTime, getFirstInstallTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getFirstInstallTime(),\n  syncGetter: () => RNDeviceInfo.getFirstInstallTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getInstallReferrer, getInstallReferrerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getInstallReferrer(),\n  syncGetter: () => RNDeviceInfo.getInstallReferrerSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getLastUpdateTime, getLastUpdateTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getLastUpdateTime(),\n  syncGetter: () => RNDeviceInfo.getLastUpdateTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getPhoneNumber, getPhoneNumberSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPhoneNumber(),\n  syncGetter: () => RNDeviceInfo.getPhoneNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCarrier, getCarrierSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getCarrier(),\n  syncGetter: () => RNDeviceInfo.getCarrierSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTotalMemory, getTotalMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalMemory(),\n  syncGetter: () => RNDeviceInfo.getTotalMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getMaxMemory, getMaxMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getMaxMemory(),\n  syncGetter: () => RNDeviceInfo.getMaxMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getTotalDiskCapacity, getTotalDiskCapacitySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalDiskCapacity(),\n  syncGetter: () => RNDeviceInfo.getTotalDiskCapacitySync(),\n  defaultValue: -1,\n});\n\nexport async function getTotalDiskCapacityOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacity();\n  }\n\n  return -1;\n}\n\nexport function getTotalDiskCapacityOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\n\nexport const [getFreeDiskStorage, getFreeDiskStorageSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getFreeDiskStorage(),\n  syncGetter: () => RNDeviceInfo.getFreeDiskStorageSync(),\n  defaultValue: -1,\n});\n\nexport async function getFreeDiskStorageOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorage();\n  }\n\n  return -1;\n}\n\nexport function getFreeDiskStorageOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\n\nexport const [getBatteryLevel, getBatteryLevelSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getBatteryLevel(),\n  syncGetter: () => RNDeviceInfo.getBatteryLevelSync(),\n  defaultValue: -1,\n});\n\nexport const [getPowerState, getPowerStateSync] = getSupportedPlatformInfoFunctions<\n  Partial<PowerState>\n>({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getPowerState(),\n  syncGetter: () => RNDeviceInfo.getPowerStateSync(),\n  defaultValue: {},\n});\n\nexport const [isBatteryCharging, isBatteryChargingSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isBatteryCharging(),\n  syncGetter: () => RNDeviceInfo.isBatteryChargingSync(),\n  defaultValue: false,\n});\n\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\n\nexport function isLandscapeSync() {\n  const { height, width } = Dimensions.get('window');\n  return width >= height;\n}\n\nexport const [isAirplaneMode, isAirplaneModeSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.isAirplaneMode(),\n  syncGetter: () => RNDeviceInfo.isAirplaneModeSync(),\n  defaultValue: false,\n});\n\nexport const getDeviceType = () => {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n};\n\nexport const getDeviceTypeSync = () => {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n};\n\nexport const [supportedAbis, supportedAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getSupportedAbis(),\n  syncGetter: () => RNDeviceInfo.getSupportedAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported32BitAbis, supported32BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported32BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported32BitAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported64BitAbis, supported64BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported64BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported64BitAbisSync(),\n  defaultValue: [],\n});\n\nexport async function hasSystemFeature(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n  return false;\n}\n\nexport function hasSystemFeatureSync(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n  return false;\n}\n\nexport function isLowBatteryLevel(level: number): boolean {\n  if (Platform.OS === 'android') {\n    return level < 0.15;\n  }\n  return level < 0.2;\n}\n\nexport const [\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSystemAvailableFeatures(),\n  syncGetter: () => RNDeviceInfo.getSystemAvailableFeaturesSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [isLocationEnabled, isLocationEnabledSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.isLocationEnabled(),\n  syncGetter: () => RNDeviceInfo.isLocationEnabledSync(),\n  defaultValue: false,\n});\n\nexport const [isHeadphonesConnected, isHeadphonesConnectedSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios'],\n    getter: () => RNDeviceInfo.isHeadphonesConnected(),\n    syncGetter: () => RNDeviceInfo.isHeadphonesConnectedSync(),\n    defaultValue: false,\n  }\n);\n\nexport const [isMouseConnected, isMouseConnectedSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['windows'],\n  getter: () => RNDeviceInfo.isMouseConnected(),\n  syncGetter: () => RNDeviceInfo.isMouseConnectedSync(),\n  defaultValue: false,\n});\n\nexport const [isKeyboardConnected, isKeyboardConnectedSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['windows'],\n  getter: () => RNDeviceInfo.isKeyboardConnected(),\n  syncGetter: () => RNDeviceInfo.isKeyboardConnectedSync(),\n  defaultValue: false,\n});\n\nexport const isTabletMode = () =>\n  getSupportedPlatformInfoAsync({\n    supportedPlatforms: ['windows'],\n    getter: () => RNDeviceInfo.isTabletMode(),\n    defaultValue: false,\n  });\n\nexport const [\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getAvailableLocationProviders(),\n  syncGetter: () => RNDeviceInfo.getAvailableLocationProvidersSync(),\n  defaultValue: {},\n});\n\nexport const [getBrightness, getBrightnessSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['ios'],\n  getter: () => RNDeviceInfo.getBrightness(),\n  syncGetter: () => RNDeviceInfo.getBrightnessSync(),\n  defaultValue: -1,\n});\n\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n  return 'unknown';\n}\n\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel(): number | null {\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_batteryLevelDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevel;\n}\n\nexport function useBatteryLevelIsLow(): number | null {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      isLowBatteryLevel(initialValue) && setBatteryLevelIsLow(initialValue);\n    };\n\n    setInitialValue();\n\n    const onChange = (level: number) => {\n      setBatteryLevelIsLow(level);\n    };\n\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevelIsLow;\n}\n\nexport function usePowerState(): Partial<PowerState> {\n  const [powerState, setPowerState] = useState<Partial<PowerState>>({});\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: Partial<PowerState> = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = (state: PowerState) => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_powerStateDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return powerState;\n}\n\nexport function useIsHeadphonesConnected(): AsyncHookResult<boolean> {\n  return useOnEvent('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\n\nexport function useFirstInstallTime(): AsyncHookResult<number> {\n  return useOnMount(getFirstInstallTime, -1);\n}\n\nexport function useDeviceName(): AsyncHookResult<string> {\n  return useOnMount(getDeviceName, 'unknown');\n}\n\nexport function useHasSystemFeature(feature: string): AsyncHookResult<boolean> {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\n\nexport function useIsEmulator(): AsyncHookResult<boolean> {\n  return useOnMount(isEmulator, false);\n}\n\nexport function useManufacturer(): AsyncHookResult<string> {\n  return useOnMount(getManufacturer, 'unknown');\n}\n\nexport function useBrightness(): number | null {\n  const [brightness, setBrightness] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBrightness();\n      setBrightness(initialValue);\n    };\n\n    const onChange = (value: number) => {\n      setBrightness(value);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_brightnessDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return brightness;\n}\n\nexport type { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\n\nconst deviceInfoModule: DeviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageOld,\n  getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUniqueIdSync,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  getBrightness,\n  getBrightnessSync,\n  hasGms,\n  hasGmsSync,\n  hasHms,\n  hasHmsSync,\n  hasNotch,\n  hasDynamicIsland,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isMouseConnected,\n  isMouseConnectedSync,\n  isKeyboardConnected,\n  isKeyboardConnectedSync,\n  isTabletMode,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState,\n  useManufacturer,\n  useIsHeadphonesConnected,\n  useBrightness,\n};\n\nexport default deviceInfoModule;\n","import { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\nlet batteryCharging = false,\n  batteryLevel = -1,\n  powerState = {};\n\nconst _readPowerState = (battery) => {\n  const { level, charging, chargingtime, dischargingtime } = battery;\n\n  return {\n    batteryLevel: level,\n    lowPowerMode: false,\n    batteryState: level === 1 ? 'full' : charging ? 'charging' : 'unplugged',\n    chargingtime,\n    dischargingtime,\n  };\n};\n\nexport const getMaxMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.jsHeapSizeLimit;\n  }\n  return -1;\n};\n\nexport const getInstallReferrerSync = () => {\n  return document.referrer;\n};\n\nexport const isAirplaneModeSync = () => {\n  return !!navigator.onLine;\n};\n\nexport const getUserAgentSync = () => {\n  return window.navigator.userAgent;\n};\n\nexport const isLocationEnabledSync = () => {\n  return !!navigator.geolocation;\n};\n\nexport const getTotalMemorySync = () => {\n  if (navigator.deviceMemory) {\n    return navigator.deviceMemory * 1000000000;\n  }\n  return -1;\n};\n\nexport const getUsedMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.usedJSHeapSize;\n  }\n  return -1;\n};\n\nconst init = () => {\n  if (typeof navigator === 'undefined' || !navigator.getBattery) return;\n\n  navigator.getBattery().then((battery) => {\n    batteryCharging = battery.charging;\n\n    battery.addEventListener('chargingchange', () => {\n      const { charging } = battery;\n\n      batteryCharging = charging;\n      powerState = _readPowerState(battery);\n\n      deviceInfoEmitter.emit('RNDeviceInfo_powerStateDidChange', powerState);\n    });\n\n    battery.addEventListener('levelchange', () => {\n      const { level } = battery;\n\n      batteryLevel = level;\n      powerState = _readPowerState(battery);\n\n      deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelDidChange', level);\n      if (level < 0.2) {\n        deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelIsLow', level);\n      }\n    });\n  });\n};\n\nconst getBaseOsSync = () => {\n  const userAgent = window.navigator.userAgent,\n    platform = window.navigator.platform,\n    macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n    windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\n    iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n\n  let os = platform;\n\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    os = 'Mac OS';\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    os = 'iOS';\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    os = 'Windows';\n  } else if (/Android/.test(userAgent)) {\n    os = 'Android';\n  } else if (!os && /Linux/.test(platform)) {\n    os = 'Linux';\n  }\n\n  return os;\n};\n\ninit();\n/**\n * react-native-web empty polyfill.\n */\n\nexport const getInstallReferrer = async () => {\n  return getInstallReferrerSync();\n};\n\nexport const getUserAgent = async () => {\n  return getUserAgentSync();\n};\n\nexport const isBatteryCharging = async () => {\n  if (navigator.getBattery) {\n    return navigator.getBattery().then(battery => battery.charging);\n  }\n  return false;\n};\n\nexport const isBatteryChargingSync = () => {\n  return batteryCharging;\n};\n\nexport const isCameraPresent = async () => {\n  if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return navigator.mediaDevices.enumerateDevices().then(devices => {\n      return !!devices.find((d) => d.kind === 'videoinput');\n    });\n  }\n  return false;\n};\n\nexport const isCameraPresentSync = () => {\n  console.log(\n    '[react-native-device-info] isCameraPresentSync not supported - please use isCameraPresent'\n  );\n  return false;\n};\n\nexport const getBatteryLevel = async () => {\n  if (navigator.getBattery) {\n    return navigator.getBattery().then(battery => battery.level);\n  }\n  return -1;\n};\n\nexport const getBatteryLevelSync = () => {\n  return batteryLevel;\n};\n\nexport const isLocationEnabled = async () => {\n  return isLocationEnabledSync();\n};\n\nexport const isAirplaneMode = async () => {\n  return isAirplaneModeSync();\n};\n\nexport const getBaseOs = async () => {\n  return getBaseOsSync();\n};\n\nexport const getTotalDiskCapacity = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    return navigator.storage.estimate().then(({ quota }) => quota)\n  }\n  return -1;\n};\n\nexport const getTotalDiskCapacitySync = () => {\n  console.log(\n    '[react-native-device-info] getTotalDiskCapacitySync not supported - please use getTotalDiskCapacity'\n  );\n  return -1;\n};\n\nexport const getFreeDiskStorage = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    return navigator.storage.estimate().then(({ quota, usage }) => quota - usage)\n  }\n  return -1;\n};\n\nexport const getFreeDiskStorageSync = () => {\n  console.log(\n    '[react-native-device-info] getFreeDiskStorageSync not supported - please use getFreeDiskStorage'\n  );\n  return -1;\n};\n\nexport const getMaxMemory = async () => {\n  return getMaxMemorySync();\n};\n\nexport const getUsedMemory = async () => {\n  return getUsedMemorySync();\n};\n\nexport const getTotalMemory = async () => {\n  return getTotalMemorySync();\n};\n\nexport const getPowerState = async () => {\n  if (navigator.getBattery) {\n    return navigator.getBattery().then((battery) => _readPowerState(battery))\n  }\n  return {};\n};\n\nexport const getPowerStateSync = () => {\n  return powerState;\n};\n"],"sourceRoot":""}