{"version":3,"sources":["../src/Expo.fx.web.tsx","../src/Expo.ts","../src/ErroRecoveryStore.ts","../src/ExpoErrorRecovery.web.ts","../../src/environment/react-native-logs.fx.ts","../../src/environment/DevAppContainer.tsx","../../src/environment/DevLoadingView.tsx","../../src/environment/DevLoadingViewNativeModule.ts","../../src/environment/getInitialSafeArea.ts","../../src/logs/Logs.web.ts","../../src/errors/ExpoErrorManager.ts","../../src/launch/registerRootComponent.tsx","../../src/launch/withExpoRoot.web.tsx","../../src/launch/RecoveryProps.ts","../src/ErrorRecovery.ts","../src/ErrorRecovery.fx.ts"],"names":["recoveredPropsToSave","props","JSON","stringify","saveRecoveryProps","Platform","isDOMAvailable","localStorage","setItem","recoveredProps","getItem","removeItem","_consumeRecoveryProps","AppRegistry","originalWarn","console","warn","args","length","test","apply","originalError","error","DevAppContainer","this","children","React","Component","useState","message","setMessage","isDevLoading","setIsDevLoading","isAnimating","setIsAnimating","translateY","useRef","Animated","Value","current","emitter","useMemo","EventEmitter","Error","useEffect","showMessageSubscription","addListener","event","setValue","hideSubscription","timing","toValue","delay","duration","useNativeDriver","OS","start","finished","remove","View","style","styles","animatedContainer","transform","pointerEvents","banner","contentContainer","flexDirection","Text","text","flex","subtitle","StyleSheet","create","position","bottom","left","right","zIndex","overflow","backgroundColor","paddingBottom","getInitialSafeArea","paddingTop","alignItems","justifyContent","textAlign","color","fontSize","Object","freeze","name","startObserving","stopObserving","removeListeners","top","originalHandler","isFatal","isErrorHandlingEnabled","code","developmentBuildMessage","customizeUnavailableMessage","includes","customizeModuleIsMissingMessage","customizeError","errorHandler","component","registerComponent","rootTag","document","getElementById","runApplication","AppRootComponent","combinedProps","attachRecoveredProps","exp","errorRecovery","setRecoveryPropsToSave","parse","_getRecoveredProps","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","getRecoveryPropsToSave","window","addEventListener"],"mappings":"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","file":"static/js/9.96bb021c.chunk.js","sourcesContent":["import './environment/react-native-logs.fx';\n\nimport { Platform } from 'expo-modules-core';\nimport * as React from 'react';\nimport { AppRegistry } from 'react-native';\n\nimport DevAppContainer from './environment/DevAppContainer';\n\n// When users dangerously import a file inside of react-native, it breaks the web alias.\n// This is one of the most common, and cryptic web errors that users encounter.\n// This conditional side-effect provides a more helpful error message for debugging.\nif (__DEV__) {\n  // Use a wrapper `__DEV__` to remove this entire block in production.\n  if (\n    // Only on web platforms.\n    Platform.OS === 'web' &&\n    // Skip mocking if someone is shimming this value out.\n    !('__fbBatchedBridgeConfig' in global)\n  ) {\n    Object.defineProperty(global, '__fbBatchedBridgeConfig', {\n      get() {\n        throw new Error(\n          \"Your web project is importing a module from 'react-native' instead of 'react-native-web'. Learn more: https://expo.fyi/fb-batched-bridge-config-web\"\n        );\n      },\n    });\n  }\n\n  // add the dev app container wrapper component to web\n  // @ts-ignore\n  AppRegistry.setWrapperComponentProvider(() => DevAppContainer);\n\n  // @ts-ignore\n  const originalSetWrapperComponentProvider = AppRegistry.setWrapperComponentProvider;\n\n  // @ts-ignore\n  AppRegistry.setWrapperComponentProvider = (provider) => {\n    function PatchedProviderComponent(props: any) {\n      const ProviderComponent = provider();\n\n      return (\n        <DevAppContainer>\n          <ProviderComponent {...props} />\n        </DevAppContainer>\n      );\n    }\n\n    originalSetWrapperComponentProvider(() => PatchedProviderComponent);\n  };\n}\n","import './Expo.fx';\n\nimport * as Logs from './logs/Logs';\n\nexport { Logs };\nexport { disableErrorHandling } from './errors/ExpoErrorManager';\nexport { default as registerRootComponent } from './launch/registerRootComponent';\n","let recoveredPropsToSave: string | null = null;\n\nexport function getRecoveryPropsToSave(): string | null {\n  return recoveredPropsToSave;\n}\n\nexport function setRecoveryPropsToSave(props: { [key: string]: any }): void {\n  recoveredPropsToSave = JSON.stringify(props);\n}\n","import { Platform } from 'expo-modules-core';\nconst LOCAL_STORAGE_KEY = 'EXPO_ERROR_RECOVERY_STORAGE';\n\nfunction _consumeRecoveryProps(): string | null {\n  if (!Platform.isDOMAvailable) return null;\n  try {\n    const props = localStorage.getItem(LOCAL_STORAGE_KEY);\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n    return props;\n  } catch {\n    // Catches localStorage SecurityError https://github.com/expo/expo/issues/8355\n  }\n  return null;\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoErrorRecovery';\n  },\n\n  saveRecoveryProps(props: string): void {\n    if (!Platform.isDOMAvailable) return;\n    try {\n      localStorage.setItem(LOCAL_STORAGE_KEY, props);\n    } catch {\n      // Catches localStorage SecurityError https://github.com/expo/expo/issues/8355\n    }\n  },\n\n  recoveredProps: _consumeRecoveryProps(),\n};\n","// AppRegistry transitively installs YellowBox as a side effect, which overrides various console\n// methods that we need to set up before we override them\nimport { AppRegistry } from 'react-native';\n\nAppRegistry; // eslint-disable-line no-unused-expressions\n\n// NOTE(2018-10-29): temporarily filter out cyclic dependency warnings here since they are noisy and\n// each warning symbolicates a stack trace, which is slow when there are many warnings\n// NOTE(2019-05-27): temporarily filter out LottieAnimationView warnings triggered by\n// unmaintained react-native-safe-module dependency.\nconst originalWarn = console.warn;\nconsole.warn = function warn(...args) {\n  if (\n    args.length > 0 &&\n    typeof args[0] === 'string' &&\n    (/^Require cycle: .*node_modules/.test(args[0]) ||\n      /Use UIManager\\.getViewManagerConfig\\('LottieAnimationView'\\) instead\\./.test(args[0]) ||\n      /ReactNative\\.NativeModules\\.LottieAnimationView\\.getConstants/.test(args[0]))\n  ) {\n    return;\n  }\n  originalWarn.apply(console, args);\n};\n\nconst originalError = console.error;\nconsole.error = function error(...args) {\n  if (\n    args.length > 0 &&\n    typeof args[0] === 'string' &&\n    /^Warning: .* has been extracted/.test(args[0])\n  ) {\n    return;\n  }\n  originalError.apply(console, args);\n};\n","import * as React from 'react';\n\nimport DevLoadingView from '../environment/DevLoadingView';\n\nexport default class DevAppContainer extends React.Component<{ children?: React.ReactNode }> {\n  render() {\n    return (\n      <>\n        {this.props.children}\n        <DevLoadingView />\n      </>\n    );\n  }\n}\n","import { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport { Animated, StyleSheet, Text, Platform, View } from 'react-native';\n\nimport DevLoadingViewNativeModule from './DevLoadingViewNativeModule';\nimport { getInitialSafeArea } from './getInitialSafeArea';\n\nexport default function DevLoadingView() {\n  const [message, setMessage] = useState('Refreshing...');\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n  const emitter = useMemo<EventEmitter>(() => {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error(\n        'Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' +\n          error.message\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!emitter) return;\n\n    function handleShowMessage(event: { message: string }) {\n      setMessage(event.message);\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    const showMessageSubscription = emitter.addListener(\n      'devLoadingView:showMessage',\n      handleShowMessage\n    );\n    const hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={[styles.animatedContainer, { transform: [{ translateY }] }]}\n      pointerEvents=\"none\">\n      <View style={styles.banner}>\n        <View style={styles.contentContainer}>\n          <View style={{ flexDirection: 'row' }}>\n            <Text style={styles.text}>{message}</Text>\n          </View>\n\n          <View style={{ flex: 1 }}>\n            <Text style={styles.subtitle}>\n              {isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\"}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42, // arbitrary\n  },\n\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom,\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15,\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)',\n  },\n});\n","export default Object.freeze({\n  name: 'DevLoadingView',\n  startObserving() {},\n  stopObserving() {},\n  addListener() {},\n  removeListeners() {},\n});\n","/**\n * Get the best estimate safe area before native modules have fully loaded,\n * this is the fallback file which assumes guessing cannot be done.\n */\nexport function getInitialSafeArea(): { top: number; bottom: number; left: number; right: number } {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  };\n}\n","export function enableExpoCliLogging(): void {\n  console.warn('Expo.Logs.enableExpoCliLogging: is not supported on web');\n}\nexport function disableExpoCliLogging(): void {\n  console.warn('Expo.Logs.disableExpoCliLogging: is not supported on web');\n}\n","// Similar interface to the one used in expo modules.\ntype CodedError = Error & { code?: string };\n\nlet isErrorHandlingEnabled = true;\n\nconst developmentBuildMessage = `If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.`;\n\nfunction customizeUnavailableMessage(error: CodedError) {\n  error.message += '\\n\\n' + developmentBuildMessage;\n}\n\nfunction customizeModuleIsMissingMessage(error: Error) {\n  error.message = `Your JavaScript code tried to access a native module that doesn't exist. \n\n${developmentBuildMessage}`;\n}\n\nfunction customizeError(error: Error | CodedError) {\n  if ('code' in error && error.code === 'ERR_UNAVAILABLE') {\n    customizeUnavailableMessage(error);\n  } else if (\n    error.message.includes('Native module cannot be null') || // RN 0.64 and below message\n    error.message.includes('`new NativeEventEmitter()` requires a non-null argument.') // RN 0.65+ message\n  ) {\n    customizeModuleIsMissingMessage(error);\n  }\n}\n\nfunction errorHandler(originalHandler, error, isFatal) {\n  if (error instanceof Error) {\n    customizeError(error);\n  }\n  originalHandler(error, isFatal);\n}\n\nexport function createErrorHandler(originalHandler) {\n  return (error, isFatal) => {\n    if (isErrorHandlingEnabled) {\n      errorHandler(originalHandler, error, isFatal);\n      return;\n    }\n\n    originalHandler(error, isFatal);\n  };\n}\n\nexport function disableErrorHandling() {\n  isErrorHandlingEnabled = false;\n}\n","import 'expo/build/Expo.fx';\nimport * as React from 'react';\nimport { AppRegistry, Platform } from 'react-native';\n\nimport withExpoRoot from './withExpoRoot';\nimport { InitialProps } from './withExpoRoot.types';\n\nexport default function registerRootComponent<P extends InitialProps>(\n  component: React.ComponentType<P>\n): void {\n  AppRegistry.registerComponent('main', () => withExpoRoot(component));\n  if (Platform.OS === 'web') {\n    const rootTag = document.getElementById('root') ?? document.getElementById('main');\n    AppRegistry.runApplication('main', { rootTag });\n  }\n}\n","import * as React from 'react';\n\nimport { attachRecoveredProps } from './RecoveryProps';\nimport { InitialProps } from './withExpoRoot.types';\n\nexport default function withExpoRoot<P extends InitialProps>(\n  AppRootComponent: React.ComponentType<P>\n): React.ComponentClass<P> {\n  return class ExpoRootComponent extends React.Component<P> {\n    render() {\n      const combinedProps = attachRecoveredProps(this.props);\n      return <AppRootComponent {...combinedProps} />;\n    }\n  };\n}\n","import { InitialProps } from './withExpoRoot.types';\n\nexport const attachRecoveredProps = <P extends InitialProps>(props: P): P => {\n  try {\n    // Optionally import expo-error-recovery\n    const { recoveredProps } = require('expo-error-recovery');\n    return {\n      ...props,\n      exp: { ...props.exp, errorRecovery: recoveredProps },\n    };\n  } catch {}\n\n  return props;\n};\n","import { setRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\nimport './ErrorRecovery.fx';\n\n// @docsMissing\nexport const recoveredProps = _getRecoveredProps();\n\n// @docsMissing\nexport type ErrorRecoveryProps = Record<string, any>;\n\n// @needsAudit\n/**\n * Set arbitrary error recovery props. If your project crashes in production as a result of a fatal\n * JS error, Expo will reload your project. If you've set these props, they'll be passed to your\n * reloaded project's initial props under `exp.errorRecovery`. Access to `localStorage` is required\n * on web, or else this will simply be a no-op.\n *\n * [Read more about error handling with Expo](/guides/errors).\n * @param props An object which will be passed to your reloaded project's initial props if the\n * project was reloaded as a result of a fatal JS error.\n */\nexport function setRecoveryProps(props: ErrorRecoveryProps): void {\n  setRecoveryPropsToSave(props);\n}\n\nfunction _getRecoveredProps(): ErrorRecoveryProps | null {\n  if (ExpoErrorRecovery.recoveredProps) {\n    return JSON.parse(ExpoErrorRecovery.recoveredProps);\n  }\n  return null;\n}\n","import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"sourceRoot":""}