{"version":3,"sources":["src/ui/core/TextInput.tsx","src/screens/LoginScreen.tsx","src/utils/auth.ts","src/ui/Screen.tsx"],"names":["dark","icon","initiallyFocused","inputStyle","style","props","ref","useRef","useEffect","current","focus","_styles","useMemo","StyleSheet","create","textInputContainer","backgroundColor","colors","gray700","gray200","height","p","paddingHorizontal","borderRadius","flexDirection","alignItems","textInput","padding","fontFamily","fontSize","flex","color","View","name","size","marginRight","inputRef","placeholderTextColor","gray300","gray600","t","useTranslation","dispatch","useDispatch","loginStatus","useSelector","state","session","deviceContext","useContext","DeviceContext","useState","username","setUsername","password","setPassword","shouldShowAlternativeLayout","genericPlatform","setOSIdentifier","devicePlatform","setDevicePlatform","getOSIdentifier","then","res","platform","loginWithPassword","validateLoginInput","LoginValidationResult","OK","NO_USER","setToast","message","type","visible","NO_PASSWORD","INVALID_USERNAME","login","method","device","backgroundContainer","position","top","left","container","DeviceSize","lg","marginTop","paddingBottom","flex1","field","marginBottom","fieldText","marginLeft","width","loginSection","justifyContent","loginTitle","or","line","gray100","gray800","lineVerticalWithMargin","marginHorizontal","orText","c","w","s","onPress","openURL","gray50","os","toString","textContentType","placeholder","onChangeText","text","secureTextEntry","passwd","loading","code","STATUS","PENDING","re1","RegExp","re2","test","children","chosenTheme","screen","StatusBar","barStyle"],"mappings":"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","file":"static/js/13.da154e53.chunk.js","sourcesContent":["import React, {FC, MutableRefObject, useEffect, useMemo, useRef} from 'react';\nimport {StyleSheet, TextStyle, View, ViewStyle} from 'react-native';\nimport colors from '../../colors';\nimport TablerIcon from './TablerIcon';\nimport {TextInput as RNTextInput, TextInputProps} from 'react-native';\nimport {p} from '../../scaling';\n\ntype TextInputParams = {\n  dark: boolean;\n  icon?: string;\n  initiallyFocused?: boolean;\n  inputStyle?: TextStyle;\n  style?: ViewStyle;\n} & TextInputProps;\n\nconst TextInput: FC<TextInputParams> = ({\n  dark,\n  icon = '',\n  initiallyFocused = false,\n  inputStyle = {},\n  style = {},\n  ...props\n}) => {\n  const ref = useRef<RNTextInput | null>(null);\n\n  useEffect(() => {\n    if (initiallyFocused) ref.current?.focus();\n  }, [initiallyFocused]);\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      textInputContainer: {\n        backgroundColor: dark ? colors.gray700 : colors.gray200,\n        // paddingVertical: 8 * p,\n        height: 40 * p,\n        paddingHorizontal: 12 * p,\n        borderRadius: 4 * p,\n        flexDirection: 'row',\n        alignItems: 'center',\n      },\n      textInput: {\n        padding: 0,\n        fontFamily: 'Inter-Regular',\n        fontSize: 10 * p,\n        flex: 1,\n        color: dark ? colors.gray200 : colors.gray700,\n      },\n    });\n  }, [dark]);\n\n  return (\n    <View style={{..._styles.textInputContainer, ...(style as Object)}}>\n      {icon ? (\n        <TablerIcon\n          name={icon}\n          size={18 * p}\n          color={dark ? colors.gray200 : colors.gray700}\n          style={{marginRight: 8 * p}}\n        />\n      ) : null}\n      <RNTextInput\n        ref={inputRef => (ref.current = inputRef)}\n        {...props}\n        style={{\n          ..._styles.textInput,\n          ...(inputStyle as Object),\n        }}\n        placeholderTextColor={dark ? colors.gray300 : colors.gray600}\n      />\n    </View>\n  );\n};\n\nexport default TextInput;\n","import React, {useState, useContext, useMemo, useEffect} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {DeviceContext} from '../context/Device';\nimport {login, setToast} from '../store/sessionSlice';\nimport 'react-native-get-random-values';\nimport Screen from '../ui/Screen';\nimport {StyleSheet, View} from 'react-native';\nimport Text from '../ui/core/Text';\nimport colors from '../colors';\nimport TextInput from '../ui/core/TextInput';\nimport Button from '../ui/core/Button';\nimport {p} from '../scaling';\nimport {STATUS, Status} from '../store/status';\nimport {AppDispatch, RootState} from '../store/store';\nimport {LoginValidationResult, validateLoginInput} from '../utils/auth';\nimport {\n  genericPlatform,\n  getOSIdentifier,\n  OSIdentifier,\n  platform,\n  Platform,\n} from '../utils/platform';\nimport {DeviceSize} from '../types';\nimport openURL from '../utils/openUrl';\n\nexport default function LoginScreen() {\n  const {t} = useTranslation();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const loginStatus = useSelector<RootState, Status>(\n    state => state.session.loginStatus,\n  );\n\n  const deviceContext = useContext(DeviceContext);\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const shouldShowAlternativeLayout = useMemo(\n    () => genericPlatform === 'web',\n    [],\n  );\n\n  const [osIdentifier, setOSIdentifier] = useState<OSIdentifier>();\n  const [devicePlatform, setDevicePlatform] = useState<Platform>();\n\n  useEffect(() => {\n    getOSIdentifier().then(res => setOSIdentifier(res));\n    platform?.then(res => setDevicePlatform(res));\n  }, []);\n\n  /**\n   * Login with password\n   */\n  const loginWithPassword = async () => {\n    /**\n     * Validate fields\n     */\n\n    const validationResult = validateLoginInput(username, password);\n\n    switch (validationResult) {\n      case LoginValidationResult.OK:\n        break;\n      case LoginValidationResult.NO_USER:\n        dispatch(\n          setToast({\n            message: t('noUsernameProvided'),\n            type: 'err',\n            visible: true,\n          }),\n        );\n        return;\n      case LoginValidationResult.NO_PASSWORD:\n        dispatch(\n          setToast({\n            message: t('noPasswordProvided'),\n            type: 'err',\n            visible: true,\n          }),\n        );\n        return;\n      case LoginValidationResult.INVALID_USERNAME:\n        dispatch(\n          setToast({\n            message: t('invalidUsernameProvided'),\n            type: 'err',\n            visible: true,\n          }),\n        );\n        return;\n    }\n\n    /**\n     * Actually login\n     */\n\n    await dispatch(\n      login({\n        method: 'password',\n        username: username,\n        password: password,\n        device: deviceContext.device,\n      }),\n    );\n  };\n\n  // const fields = [\n  //   ['brand-open-source', t('title1'), t('desc1')],\n  //   ['bolt', t('title2'), t('desc2')],\n  //   ['apps', t('title3'), t('desc3')],\n  // ];\n\n  /**\n   * Show toast notification based on login result\n   */\n  // useEffect(() => {\n  //   if (loginStatus.code === STATUS.ERROR) {\n  //     dispatch(\n  //       setToast({\n  //         type: 'err',\n  //         message: loginStatus.error?.message ?? '',\n  //         visible: true,\n  //         icon: '',\n  //       }),\n  //     );\n  //   }\n  // }, []);\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      backgroundContainer: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n      },\n      container: {\n        flex: 1,\n        flexDirection:\n          shouldShowAlternativeLayout && deviceContext.size >= DeviceSize.lg\n            ? 'row'\n            : 'column',\n        marginTop: 80 * p,\n        paddingHorizontal: 16 * p,\n        paddingBottom: 16 * p,\n      },\n      flex1: {\n        flex: 1,\n      },\n      field: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 16 * p,\n      },\n      fieldText: {\n        marginLeft: 16 * p,\n        width: '85%',\n      },\n      loginSection: {\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'center',\n      },\n      loginTitle: {\n        marginBottom: 32 * p,\n      },\n      or: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginBottom: 16 * p,\n      },\n      line: {\n        flex: 1,\n        height: 1,\n        backgroundColor: deviceContext.dark ? colors.gray100 : colors.gray800,\n      },\n      lineVerticalWithMargin: {\n        width: 1,\n        marginHorizontal: 32 * p,\n        backgroundColor: deviceContext.dark ? colors.gray300 : colors.gray600,\n      },\n      orText: {\n        marginHorizontal: 8 * p,\n      },\n    });\n  }, [deviceContext.dark, deviceContext.size, shouldShowAlternativeLayout]);\n\n  return (\n    <Screen>\n      <View style={_styles.backgroundContainer} />\n      <View style={_styles.container}>\n        <View style={[_styles.flex1]}>\n          <Text\n            c={deviceContext.dark ? colors.gray100 : colors.gray800}\n            w=\"b\"\n            s={24 * p}\n            style={{marginBottom: 16 * p}}>\n            Welcome to {'\\n'}Open PoliTo\n          </Text>\n          <Text\n            c={deviceContext.dark ? colors.gray200 : colors.gray700}\n            w=\"m\"\n            s={16 * p}>\n            {t('caption')}\n          </Text>\n          {shouldShowAlternativeLayout && (\n            <View\n              style={[\n                _styles.flex1,\n                {\n                  flexDirection: 'column',\n                  justifyContent: 'center',\n                },\n              ]}>\n              <View style={{alignItems: 'flex-start'}}>\n                <View\n                  style={{\n                    alignItems: 'stretch',\n                    backgroundColor: deviceContext.dark\n                      ? colors.gray700\n                      : colors.gray200,\n                    padding: 16 * p,\n                    borderRadius: 8 * p,\n                  }}>\n                  <View\n                    style={{\n                      alignItems: 'flex-start',\n                    }}>\n                    <Text\n                      c={deviceContext.dark ? colors.gray100 : colors.gray800}\n                      w=\"b\"\n                      s={(deviceContext.size >= DeviceSize.lg ? 24 : 14) * p}\n                      style={{marginBottom: 8 * p}}>\n                      {t('downloadNativeApp')}\n                    </Text>\n                    <Text\n                      c={deviceContext.dark ? colors.gray200 : colors.gray700}\n                      w=\"m\"\n                      s={(deviceContext.size >= DeviceSize.lg ? 16 : 12) * p}\n                      style={{marginBottom: 16 * p}}>\n                      {t('downloadNativeAppDescription')}\n                    </Text>\n                  </View>\n                  <Button\n                    onPress={() => {\n                      openURL(\n                        'https://github.com/open-polito/open-polito/releases/latest',\n                      );\n                    }}>\n                    <View style={{flex: 1}}>\n                      <Text s={12 * p} w=\"b\" c={colors.gray50}>\n                        DOWNLOAD\n                      </Text>\n                      <Text s={12 * p} w=\"r\" c={colors.gray50}>\n                        {devicePlatform?.os?.toString()}\n                      </Text>\n                    </View>\n                  </Button>\n                </View>\n              </View>\n            </View>\n          )}\n        </View>\n        {shouldShowAlternativeLayout && (\n          <View style={_styles.lineVerticalWithMargin} />\n        )}\n        {/* <View style={{marginTop: 48 * p}}>\n          {fields.map(part => (\n            <View style={_styles.field}>\n              <TablerIcon name={part[0]} color={colors.accent300} />\n              <View style={_styles.fieldText}>\n                <Text\n                  s={12 * p}\n                  c={deviceContext.dark ? colors.gray100 : colors.gray800}\n                  w=\"b\"\n                  style={{marginBottom: 4 * p}}>\n                  {part[1]}\n                </Text>\n                <Text\n                  s={12 * p}\n                  c={deviceContext.dark ? colors.gray200 : colors.gray700}\n                  w=\"m\">\n                  {part[2]}\n                </Text>\n              </View>\n            </View>\n          ))}\n        </View> */}\n        <View style={[_styles.loginSection, _styles.flex1]}>\n          {/* TODO proper behavior when keyboard shows up */}\n          {shouldShowAlternativeLayout && (\n            <View style={_styles.loginTitle}>\n              <Text\n                c={deviceContext.dark ? colors.gray100 : colors.gray800}\n                w=\"b\"\n                s={24 * p}\n                style={{marginBottom: 8 * p}}>\n                {t('login')}\n              </Text>\n              <Text\n                c={deviceContext.dark ? colors.gray200 : colors.gray700}\n                w=\"m\"\n                s={12 * p}\n                style={{marginBottom: 16 * p}}>\n                {t('loginWebSpecificDescription')}\n              </Text>\n            </View>\n          )}\n          <TextInput\n            dark={deviceContext.dark}\n            textContentType=\"emailAddress\"\n            icon=\"user-circle\"\n            placeholder={t('userPlaceholder')}\n            style={{\n              marginBottom: 16 * p,\n            }}\n            onChangeText={text => {\n              setUsername(text);\n            }}\n          />\n          <TextInput\n            dark={deviceContext.dark}\n            textContentType=\"password\"\n            secureTextEntry={true}\n            icon=\"lock\"\n            placeholder={t('passwordPlaceholder')}\n            style={{\n              marginBottom: 16 * p,\n            }}\n            onChangeText={passwd => {\n              setPassword(passwd);\n            }}\n          />\n          <Button\n            loading={loginStatus.code === STATUS.PENDING}\n            text={t('login')}\n            style={{marginBottom: 16 * p}}\n            onPress={() => {\n              loginWithPassword();\n            }}\n          />\n          {/* <View style={_styles.or}>\n            <View style={_styles.line} />\n            <Text\n              w=\"r\"\n              s={10 * p}\n              c={deviceContext.dark ? colors.gray100 : colors.gray800}\n              style={_styles.orText}>\n              {t('or').toUpperCase()}\n            </Text>\n            <View style={_styles.line} />\n          </View>\n          <Button text={t('takeTour')} secondary /> */}\n          {/*\n          TODO enable when ToS defined\n          */}\n          {/* <Text\n            w=\"r\"\n            s={10 * p}\n            c={deviceContext.dark ? colors.gray100 : colors.gray800}\n            style={{textAlign: 'center', marginTop: 16 * p}}>\n            {t('agreement') + ' '}\n            <Text\n              href=\"https://example.com/\"\n              w=\"r\"\n              s={10 * p}\n              c={colors.accent300}>\n              {t('tos')}\n            </Text>\n            {` ${t('and')} `}\n            <Text\n              href=\"https://example.com/\"\n              w=\"r\"\n              s={10 * p}\n              c={colors.accent300}>\n              {t('privacyPolicy')}\n            </Text>\n          </Text> */}\n        </View>\n      </View>\n    </Screen>\n  );\n}\n","/**\n * @file utils for authentication\n */\n\n/**\n * Login validation error types\n */\nexport enum LoginValidationResult {\n  OK,\n  NO_USER,\n  NO_PASSWORD,\n  INVALID_USERNAME,\n}\n\n/**\n * Validates login username and password input.\n * @param username\n * @param password\n * @returns validation result\n */\nexport const validateLoginInput = (\n  username: string,\n  password: string,\n): LoginValidationResult => {\n  if (username === '') {\n    return LoginValidationResult.NO_USER;\n  }\n  if (password === '') {\n    return LoginValidationResult.NO_PASSWORD;\n  }\n\n  const re1 = new RegExp('[sS]\\\\d+');\n  const re2 = new RegExp('.+@studenti.polito.it');\n  if (!re1.test(username) && !re2.test(username)) {\n    return LoginValidationResult.INVALID_USERNAME;\n  }\n\n  return LoginValidationResult.OK;\n};\n","import React, {ReactNode, useContext, useMemo} from 'react';\nimport {StatusBar, StyleSheet, View} from 'react-native';\nimport colors from '../colors';\nimport {DeviceContext} from '../context/Device';\n\nconst Screen = ({children}: {children: ReactNode}) => {\n  const {dark, chosenTheme} = useContext(DeviceContext);\n\n  const _styles = useMemo(() => {\n    return StyleSheet.create({\n      screen: {\n        backgroundColor: dark ? colors.gray800 : colors.gray100,\n        flex: 1,\n      },\n    });\n  }, [dark]);\n\n  return (\n    <View style={{flex: 1}}>\n      <StatusBar\n        barStyle={\n          chosenTheme == 'system'\n            ? 'default'\n            : dark\n            ? 'dark-content'\n            : 'light-content'\n        }\n      />\n      <View style={_styles.screen}>{children}</View>\n    </View>\n  );\n};\n\nexport default Screen;\n"],"sourceRoot":""}